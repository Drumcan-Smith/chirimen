// VL53L1X driver for CHIRIMEN raspberry pi3
// Long Range Laser ToF Distance Sensor
// Ported from https://github.com/pololu/vl53l1x-arduino
//
// Not VL53L0X driver
// Programmed by Satoru Takagi


var VL53L1X = function(i2cPort,slaveAddress){
	if (!slaveAddress){
		slaveAddress = 0x29;
	}
	this.i2cPort = i2cPort;
	this.i2cSlave = null;
	this.slaveAddress = slaveAddress;
	
	this.SOFT_RESET                                                                 = 0x0000;
	this.I2C_SLAVE__DEVICE_ADDRESS                                                  = 0x0001;
	this.ANA_CONFIG__VHV_REF_SEL_VDDPIX                                             = 0x0002;
	this.ANA_CONFIG__VHV_REF_SEL_VQUENCH                                            = 0x0003;
	this.ANA_CONFIG__REG_AVDD1V2_SEL                                                = 0x0004;
	this.ANA_CONFIG__FAST_OSC__TRIM                                                 = 0x0005;
	this.OSC_MEASURED__FAST_OSC__FREQUENCY                                          = 0x0006;
	this.OSC_MEASURED__FAST_OSC__FREQUENCY_HI                                       = 0x0006;
	this.OSC_MEASURED__FAST_OSC__FREQUENCY_LO                                       = 0x0007;
	this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND                                      = 0x0008;
	this.VHV_CONFIG__COUNT_THRESH                                                   = 0x0009;
	this.VHV_CONFIG__OFFSET                                                         = 0x000A;
	this.VHV_CONFIG__INIT                                                           = 0x000B;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_0                                          = 0x000D;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_1                                          = 0x000E;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_2                                          = 0x000F;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_3                                          = 0x0010;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_4                                          = 0x0011;
	this.GLOBAL_CONFIG__SPAD_ENABLES_REF_5                                          = 0x0012;
	this.GLOBAL_CONFIG__REF_EN_START_SELECT                                         = 0x0013;
	this.REF_SPAD_MAN__NUM_REQUESTED_REF_SPADS                                      = 0x0014;
	this.REF_SPAD_MAN__REF_LOCATION                                                 = 0x0015;
	this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS                             = 0x0016;
	this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_HI                          = 0x0016;
	this.ALGO__CROSSTALK_COMPENSATION_PLANE_OFFSET_KCPS_LO                          = 0x0017;
	this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS                         = 0x0018;
	this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_HI                      = 0x0018;
	this.ALGO__CROSSTALK_COMPENSATION_X_PLANE_GRADIENT_KCPS_LO                      = 0x0019;
	this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS                         = 0x001A;
	this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_HI                      = 0x001A;
	this.ALGO__CROSSTALK_COMPENSATION_Y_PLANE_GRADIENT_KCPS_LO                      = 0x001B;
	this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS                                      = 0x001C;
	this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_HI                                   = 0x001C;
	this.REF_SPAD_CHAR__TOTAL_RATE_TARGET_MCPS_LO                                   = 0x001D;
	this.ALGO__PART_TO_PART_RANGE_OFFSET_MM                                         = 0x001E;
	this.ALGO__PART_TO_PART_RANGE_OFFSET_MM_HI                                      = 0x001E;
	this.ALGO__PART_TO_PART_RANGE_OFFSET_MM_LO                                      = 0x001F;
	this.MM_CONFIG__INNER_OFFSET_MM                                                 = 0x0020;
	this.MM_CONFIG__INNER_OFFSET_MM_HI                                              = 0x0020;
	this.MM_CONFIG__INNER_OFFSET_MM_LO                                              = 0x0021;
	this.MM_CONFIG__OUTER_OFFSET_MM                                                 = 0x0022;
	this.MM_CONFIG__OUTER_OFFSET_MM_HI                                              = 0x0022;
	this.MM_CONFIG__OUTER_OFFSET_MM_LO                                              = 0x0023;
	this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS                                         = 0x0024;
	this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_HI                                      = 0x0024;
	this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS_LO                                      = 0x0025;
	this.DEBUG__CTRL                                                                = 0x0026;
	this.TEST_MODE__CTRL                                                            = 0x0027;
	this.CLK_GATING__CTRL                                                           = 0x0028;
	this.NVM_BIST__CTRL                                                             = 0x0029;
	this.NVM_BIST__NUM_NVM_WORDS                                                    = 0x002A;
	this.NVM_BIST__START_ADDRESS                                                    = 0x002B;
	this.HOST_IF__STATUS                                                            = 0x002C;
	this.PAD_I2C_HV__CONFIG                                                         = 0x002D;
	this.PAD_I2C_HV__EXTSUP_CONFIG                                                  = 0x002E;
	this.GPIO_HV_PAD__CTRL                                                          = 0x002F;
	this.GPIO_HV_MUX__CTRL                                                          = 0x0030;
	this.GPIO__TIO_HV_STATUS                                                        = 0x0031;
	this.GPIO__FIO_HV_STATUS                                                        = 0x0032;
	this.ANA_CONFIG__SPAD_SEL_PSWIDTH                                               = 0x0033;
	this.ANA_CONFIG__VCSEL_PULSE_WIDTH_OFFSET                                       = 0x0034;
	this.ANA_CONFIG__FAST_OSC__CONFIG_CTRL                                          = 0x0035;
	this.SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS                                  = 0x0036;
	this.SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS                                = 0x0037;
	this.SIGMA_ESTIMATOR__SIGMA_REF_MM                                              = 0x0038;
	this.ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM                               = 0x0039;
	this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_0                                   = 0x003A;
	this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_1                                   = 0x003B;
	this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS                                          = 0x003C;
	this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS_HI                                       = 0x003C;
	this.ALGO__RANGE_IGNORE_THRESHOLD_MCPS_LO                                       = 0x003D;
	this.ALGO__RANGE_IGNORE_VALID_HEIGHT_MM                                         = 0x003E;
	this.ALGO__RANGE_MIN_CLIP                                                       = 0x003F;
	this.ALGO__CONSISTENCY_CHECK__TOLERANCE                                         = 0x0040;
	this.SPARE_HOST_CONFIG__STATIC_CONFIG_SPARE_2                                   = 0x0041;
	this.SD_CONFIG__RESET_STAGES_MSB                                                = 0x0042;
	this.SD_CONFIG__RESET_STAGES_LSB                                                = 0x0043;
	this.GPH_CONFIG__STREAM_COUNT_UPDATE_VALUE                                      = 0x0044;
	this.GLOBAL_CONFIG__STREAM_DIVIDER                                              = 0x0045;
	this.SYSTEM__INTERRUPT_CONFIG_GPIO                                              = 0x0046;
	this.CAL_CONFIG__VCSEL_START                                                    = 0x0047;
	this.CAL_CONFIG__REPEAT_RATE                                                    = 0x0048;
	this.CAL_CONFIG__REPEAT_RATE_HI                                                 = 0x0048;
	this.CAL_CONFIG__REPEAT_RATE_LO                                                 = 0x0049;
	this.GLOBAL_CONFIG__VCSEL_WIDTH                                                 = 0x004A;
	this.PHASECAL_CONFIG__TIMEOUT_MACROP                                            = 0x004B;
	this.PHASECAL_CONFIG__TARGET                                                    = 0x004C;
	this.PHASECAL_CONFIG__OVERRIDE                                                  = 0x004D;
	this.DSS_CONFIG__ROI_MODE_CONTROL                                               = 0x004F;
	this.SYSTEM__THRESH_RATE_HIGH                                                   = 0x0050;
	this.SYSTEM__THRESH_RATE_HIGH_HI                                                = 0x0050;
	this.SYSTEM__THRESH_RATE_HIGH_LO                                                = 0x0051;
	this.SYSTEM__THRESH_RATE_LOW                                                    = 0x0052;
	this.SYSTEM__THRESH_RATE_LOW_HI                                                 = 0x0052;
	this.SYSTEM__THRESH_RATE_LOW_LO                                                 = 0x0053;
	this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT                                  = 0x0054;
	this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI                               = 0x0054;
	this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO                               = 0x0055;
	this.DSS_CONFIG__MANUAL_BLOCK_SELECT                                            = 0x0056;
	this.DSS_CONFIG__APERTURE_ATTENUATION                                           = 0x0057;
	this.DSS_CONFIG__MAX_SPADS_LIMIT                                                = 0x0058;
	this.DSS_CONFIG__MIN_SPADS_LIMIT                                                = 0x0059;
	this.MM_CONFIG__TIMEOUT_MACROP_A                                                = 0x005A; // added by Pololu for 16-bit accesses
	this.MM_CONFIG__TIMEOUT_MACROP_A_HI                                             = 0x005A;
	this.MM_CONFIG__TIMEOUT_MACROP_A_LO                                             = 0x005B;
	this.MM_CONFIG__TIMEOUT_MACROP_B                                                = 0x005C; // added by Pololu for 16-bit accesses
	this.MM_CONFIG__TIMEOUT_MACROP_B_HI                                             = 0x005C;
	this.MM_CONFIG__TIMEOUT_MACROP_B_LO                                             = 0x005D;
	this.RANGE_CONFIG__TIMEOUT_MACROP_A                                             = 0x005E; // added by Pololu for 16-bit accesses
	this.RANGE_CONFIG__TIMEOUT_MACROP_A_HI                                          = 0x005E;
	this.RANGE_CONFIG__TIMEOUT_MACROP_A_LO                                          = 0x005F;
	this.RANGE_CONFIG__VCSEL_PERIOD_A                                               = 0x0060;
	this.RANGE_CONFIG__TIMEOUT_MACROP_B                                             = 0x0061; // added by Pololu for 16-bit accesses
	this.RANGE_CONFIG__TIMEOUT_MACROP_B_HI                                          = 0x0061;
	this.RANGE_CONFIG__TIMEOUT_MACROP_B_LO                                          = 0x0062;
	this.RANGE_CONFIG__VCSEL_PERIOD_B                                               = 0x0063;
	this.RANGE_CONFIG__SIGMA_THRESH                                                 = 0x0064;
	this.RANGE_CONFIG__SIGMA_THRESH_HI                                              = 0x0064;
	this.RANGE_CONFIG__SIGMA_THRESH_LO                                              = 0x0065;
	this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS                                = 0x0066;
	this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI                             = 0x0066;
	this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO                             = 0x0067;
	this.RANGE_CONFIG__VALID_PHASE_LOW                                              = 0x0068;
	this.RANGE_CONFIG__VALID_PHASE_HIGH                                             = 0x0069;
	this.SYSTEM__INTERMEASUREMENT_PERIOD                                            = 0x006C;
	this.SYSTEM__INTERMEASUREMENT_PERIOD_3                                          = 0x006C;
	this.SYSTEM__INTERMEASUREMENT_PERIOD_2                                          = 0x006D;
	this.SYSTEM__INTERMEASUREMENT_PERIOD_1                                          = 0x006E;
	this.SYSTEM__INTERMEASUREMENT_PERIOD_0                                          = 0x006F;
	this.SYSTEM__FRACTIONAL_ENABLE                                                  = 0x0070;
	this.SYSTEM__GROUPED_PARAMETER_HOLD_0                                           = 0x0071;
	this.SYSTEM__THRESH_HIGH                                                        = 0x0072;
	this.SYSTEM__THRESH_HIGH_HI                                                     = 0x0072;
	this.SYSTEM__THRESH_HIGH_LO                                                     = 0x0073;
	this.SYSTEM__THRESH_LOW                                                         = 0x0074;
	this.SYSTEM__THRESH_LOW_HI                                                      = 0x0074;
	this.SYSTEM__THRESH_LOW_LO                                                      = 0x0075;
	this.SYSTEM__ENABLE_XTALK_PER_QUADRANT                                          = 0x0076;
	this.SYSTEM__SEED_CONFIG                                                        = 0x0077;
	this.SD_CONFIG__WOI_SD0                                                         = 0x0078;
	this.SD_CONFIG__WOI_SD1                                                         = 0x0079;
	this.SD_CONFIG__INITIAL_PHASE_SD0                                               = 0x007A;
	this.SD_CONFIG__INITIAL_PHASE_SD1                                               = 0x007B;
	this.SYSTEM__GROUPED_PARAMETER_HOLD_1                                           = 0x007C;
	this.SD_CONFIG__FIRST_ORDER_SELECT                                              = 0x007D;
	this.SD_CONFIG__QUANTIFIER                                                      = 0x007E;
	this.ROI_CONFIG__USER_ROI_CENTRE_SPAD                                           = 0x007F;
	this.ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE                              = 0x0080;
	this.SYSTEM__SEQUENCE_CONFIG                                                    = 0x0081;
	this.SYSTEM__GROUPED_PARAMETER_HOLD                                             = 0x0082;
	this.POWER_MANAGEMENT__GO1_POWER_FORCE                                          = 0x0083;
	this.SYSTEM__STREAM_COUNT_CTRL                                                  = 0x0084;
	this.FIRMWARE__ENABLE                                                           = 0x0085;
	this.SYSTEM__INTERRUPT_CLEAR                                                    = 0x0086;
	this.SYSTEM__MODE_START                                                         = 0x0087;
	this.RESULT__INTERRUPT_STATUS                                                   = 0x0088;
	this.RESULT__RANGE_STATUS                                                       = 0x0089;
	this.RESULT__REPORT_STATUS                                                      = 0x008A;
	this.RESULT__STREAM_COUNT                                                       = 0x008B;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0                                     = 0x008C;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI                                  = 0x008C;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO                                  = 0x008D;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0                                    = 0x008E;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI                                 = 0x008E;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO                                 = 0x008F;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0                                        = 0x0090;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI                                     = 0x0090;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO                                     = 0x0091;
	this.RESULT__SIGMA_SD0                                                          = 0x0092;
	this.RESULT__SIGMA_SD0_HI                                                       = 0x0092;
	this.RESULT__SIGMA_SD0_LO                                                       = 0x0093;
	this.RESULT__PHASE_SD0                                                          = 0x0094;
	this.RESULT__PHASE_SD0_HI                                                       = 0x0094;
	this.RESULT__PHASE_SD0_LO                                                       = 0x0095;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0                             = 0x0096;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI                          = 0x0096;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO                          = 0x0097;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0                = 0x0098;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI             = 0x0098;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO             = 0x0099;
	this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0                                = 0x009A;
	this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                             = 0x009A;
	this.RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                             = 0x009B;
	this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0                                = 0x009C;
	this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                             = 0x009C;
	this.RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                             = 0x009D;
	this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0                                     = 0x009E;
	this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI                                  = 0x009E;
	this.RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO                                  = 0x009F;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1                                     = 0x00A0;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI                                  = 0x00A0;
	this.RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO                                  = 0x00A1;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1                                    = 0x00A2;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI                                 = 0x00A2;
	this.RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO                                 = 0x00A3;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1                                        = 0x00A4;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI                                     = 0x00A4;
	this.RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO                                     = 0x00A5;
	this.RESULT__SIGMA_SD1                                                          = 0x00A6;
	this.RESULT__SIGMA_SD1_HI                                                       = 0x00A6;
	this.RESULT__SIGMA_SD1_LO                                                       = 0x00A7;
	this.RESULT__PHASE_SD1                                                          = 0x00A8;
	this.RESULT__PHASE_SD1_HI                                                       = 0x00A8;
	this.RESULT__PHASE_SD1_LO                                                       = 0x00A9;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1                             = 0x00AA;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI                          = 0x00AA;
	this.RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO                          = 0x00AB;
	this.RESULT__SPARE_0_SD1                                                        = 0x00AC;
	this.RESULT__SPARE_0_SD1_HI                                                     = 0x00AC;
	this.RESULT__SPARE_0_SD1_LO                                                     = 0x00AD;
	this.RESULT__SPARE_1_SD1                                                        = 0x00AE;
	this.RESULT__SPARE_1_SD1_HI                                                     = 0x00AE;
	this.RESULT__SPARE_1_SD1_LO                                                     = 0x00AF;
	this.RESULT__SPARE_2_SD1                                                        = 0x00B0;
	this.RESULT__SPARE_2_SD1_HI                                                     = 0x00B0;
	this.RESULT__SPARE_2_SD1_LO                                                     = 0x00B1;
	this.RESULT__SPARE_3_SD1                                                        = 0x00B2;
	this.RESULT__THRESH_INFO                                                        = 0x00B3;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0                                     = 0x00B4;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3                                   = 0x00B4;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2                                   = 0x00B5;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1                                   = 0x00B6;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0                                   = 0x00B7;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0                                      = 0x00B8;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3                                    = 0x00B8;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2                                    = 0x00B9;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1                                    = 0x00BA;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0                                    = 0x00BB;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0                                       = 0x00BC;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3                                     = 0x00BC;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2                                     = 0x00BD;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1                                     = 0x00BE;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0                                     = 0x00BF;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0                                     = 0x00C0;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3                                   = 0x00C0;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2                                   = 0x00C1;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1                                   = 0x00C2;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0                                   = 0x00C3;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1                                     = 0x00C4;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3                                   = 0x00C4;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2                                   = 0x00C5;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1                                   = 0x00C6;
	this.RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0                                   = 0x00C7;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1                                      = 0x00C8;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3                                    = 0x00C8;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2                                    = 0x00C9;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1                                    = 0x00CA;
	this.RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0                                    = 0x00CB;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1                                       = 0x00CC;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3                                     = 0x00CC;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2                                     = 0x00CD;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1                                     = 0x00CE;
	this.RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0                                     = 0x00CF;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1                                     = 0x00D0;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3                                   = 0x00D0;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2                                   = 0x00D1;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1                                   = 0x00D2;
	this.RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0                                   = 0x00D3;
	this.RESULT_CORE__SPARE_0                                                       = 0x00D4;
	this.PHASECAL_RESULT__REFERENCE_PHASE                                           = 0x00D6;
	this.PHASECAL_RESULT__REFERENCE_PHASE_HI                                        = 0x00D6;
	this.PHASECAL_RESULT__REFERENCE_PHASE_LO                                        = 0x00D7;
	this.PHASECAL_RESULT__VCSEL_START                                               = 0x00D8;
	this.REF_SPAD_CHAR_RESULT__NUM_ACTUAL_REF_SPADS                                 = 0x00D9;
	this.REF_SPAD_CHAR_RESULT__REF_LOCATION                                         = 0x00DA;
	this.VHV_RESULT__COLDBOOT_STATUS                                                = 0x00DB;
	this.VHV_RESULT__SEARCH_RESULT                                                  = 0x00DC;
	this.VHV_RESULT__LATEST_SETTING                                                 = 0x00DD;
	this.RESULT__OSC_CALIBRATE_VAL                                                  = 0x00DE;
	this.RESULT__OSC_CALIBRATE_VAL_HI                                               = 0x00DE;
	this.RESULT__OSC_CALIBRATE_VAL_LO                                               = 0x00DF;
	this.ANA_CONFIG__POWERDOWN_GO1                                                  = 0x00E0;
	this.ANA_CONFIG__REF_BG_CTRL                                                    = 0x00E1;
	this.ANA_CONFIG__REGDVDD1V2_CTRL                                                = 0x00E2;
	this.ANA_CONFIG__OSC_SLOW_CTRL                                                  = 0x00E3;
	this.TEST_MODE__STATUS                                                          = 0x00E4;
	this.FIRMWARE__SYSTEM_STATUS                                                    = 0x00E5;
	this.FIRMWARE__MODE_STATUS                                                      = 0x00E6;
	this.FIRMWARE__SECONDARY_MODE_STATUS                                            = 0x00E7;
	this.FIRMWARE__CAL_REPEAT_RATE_COUNTER                                          = 0x00E8;
	this.FIRMWARE__CAL_REPEAT_RATE_COUNTER_HI                                       = 0x00E8;
	this.FIRMWARE__CAL_REPEAT_RATE_COUNTER_LO                                       = 0x00E9;
	this.FIRMWARE__HISTOGRAM_BIN                                                    = 0x00EA;
	this.GPH__SYSTEM__THRESH_HIGH                                                   = 0x00EC;
	this.GPH__SYSTEM__THRESH_HIGH_HI                                                = 0x00EC;
	this.GPH__SYSTEM__THRESH_HIGH_LO                                                = 0x00ED;
	this.GPH__SYSTEM__THRESH_LOW                                                    = 0x00EE;
	this.GPH__SYSTEM__THRESH_LOW_HI                                                 = 0x00EE;
	this.GPH__SYSTEM__THRESH_LOW_LO                                                 = 0x00EF;
	this.GPH__SYSTEM__ENABLE_XTALK_PER_QUADRANT                                     = 0x00F0;
	this.GPH__SPARE_0                                                               = 0x00F1;
	this.GPH__SD_CONFIG__WOI_SD0                                                    = 0x00F2;
	this.GPH__SD_CONFIG__WOI_SD1                                                    = 0x00F3;
	this.GPH__SD_CONFIG__INITIAL_PHASE_SD0                                          = 0x00F4;
	this.GPH__SD_CONFIG__INITIAL_PHASE_SD1                                          = 0x00F5;
	this.GPH__SD_CONFIG__FIRST_ORDER_SELECT                                         = 0x00F6;
	this.GPH__SD_CONFIG__QUANTIFIER                                                 = 0x00F7;
	this.GPH__ROI_CONFIG__USER_ROI_CENTRE_SPAD                                      = 0x00F8;
	this.GPH__ROI_CONFIG__USER_ROI_REQUESTED_GLOBAL_XY_SIZE                         = 0x00F9;
	this.GPH__SYSTEM__SEQUENCE_CONFIG                                               = 0x00FA;
	this.GPH__GPH_ID                                                                = 0x00FB;
	this.SYSTEM__INTERRUPT_SET                                                      = 0x00FC;
	this.INTERRUPT_MANAGER__ENABLES                                                 = 0x00FD;
	this.INTERRUPT_MANAGER__CLEAR                                                   = 0x00FE;
	this.INTERRUPT_MANAGER__STATUS                                                  = 0x00FF;
	this.MCU_TO_HOST_BANK__WR_ACCESS_EN                                             = 0x0100;
	this.POWER_MANAGEMENT__GO1_RESET_STATUS                                         = 0x0101;
	this.PAD_STARTUP_MODE__VALUE_RO                                                 = 0x0102;
	this.PAD_STARTUP_MODE__VALUE_CTRL                                               = 0x0103;
	this.PLL_PERIOD_US                                                              = 0x0104;
	this.PLL_PERIOD_US_3                                                            = 0x0104;
	this.PLL_PERIOD_US_2                                                            = 0x0105;
	this.PLL_PERIOD_US_1                                                            = 0x0106;
	this.PLL_PERIOD_US_0                                                            = 0x0107;
	this.INTERRUPT_SCHEDULER__DATA_OUT                                              = 0x0108;
	this.INTERRUPT_SCHEDULER__DATA_OUT_3                                            = 0x0108;
	this.INTERRUPT_SCHEDULER__DATA_OUT_2                                            = 0x0109;
	this.INTERRUPT_SCHEDULER__DATA_OUT_1                                            = 0x010A;
	this.INTERRUPT_SCHEDULER__DATA_OUT_0                                            = 0x010B;
	this.NVM_BIST__COMPLETE                                                         = 0x010C;
	this.NVM_BIST__STATUS                                                           = 0x010D;
	this.IDENTIFICATION__MODEL_ID                                                   = 0x010F;
	this.IDENTIFICATION__MODULE_TYPE                                                = 0x0110;
	this.IDENTIFICATION__REVISION_ID                                                = 0x0111;
	this.IDENTIFICATION__MODULE_ID                                                  = 0x0112;
	this.IDENTIFICATION__MODULE_ID_HI                                               = 0x0112;
	this.IDENTIFICATION__MODULE_ID_LO                                               = 0x0113;
	this.ANA_CONFIG__FAST_OSC__TRIM_MAX                                             = 0x0114;
	this.ANA_CONFIG__FAST_OSC__FREQ_SET                                             = 0x0115;
	this.ANA_CONFIG__VCSEL_TRIM                                                     = 0x0116;
	this.ANA_CONFIG__VCSEL_SELION                                                   = 0x0117;
	this.ANA_CONFIG__VCSEL_SELION_MAX                                               = 0x0118;
	this.PROTECTED_LASER_SAFETY__LOCK_BIT                                           = 0x0119;
	this.LASER_SAFETY__KEY                                                          = 0x011A;
	this.LASER_SAFETY__KEY_RO                                                       = 0x011B;
	this.LASER_SAFETY__CLIP                                                         = 0x011C;
	this.LASER_SAFETY__MULT                                                         = 0x011D;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_0                                          = 0x011E;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_1                                          = 0x011F;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_2                                          = 0x0120;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_3                                          = 0x0121;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_4                                          = 0x0122;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_5                                          = 0x0123;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_6                                          = 0x0124;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_7                                          = 0x0125;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_8                                          = 0x0126;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_9                                          = 0x0127;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_10                                         = 0x0128;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_11                                         = 0x0129;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_12                                         = 0x012A;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_13                                         = 0x012B;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_14                                         = 0x012C;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_15                                         = 0x012D;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_16                                         = 0x012E;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_17                                         = 0x012F;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_18                                         = 0x0130;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_19                                         = 0x0131;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_20                                         = 0x0132;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_21                                         = 0x0133;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_22                                         = 0x0134;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_23                                         = 0x0135;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_24                                         = 0x0136;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_25                                         = 0x0137;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_26                                         = 0x0138;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_27                                         = 0x0139;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_28                                         = 0x013A;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_29                                         = 0x013B;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_30                                         = 0x013C;
	this.GLOBAL_CONFIG__SPAD_ENABLES_RTN_31                                         = 0x013D;
	this.ROI_CONFIG__MODE_ROI_CENTRE_SPAD                                           = 0x013E;
	this.ROI_CONFIG__MODE_ROI_XY_SIZE                                               = 0x013F;
	this.GO2_HOST_BANK_ACCESS__OVERRIDE                                             = 0x0300;
	this.MCU_UTIL_MULTIPLIER__MULTIPLICAND                                          = 0x0400;
	this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_3                                        = 0x0400;
	this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_2                                        = 0x0401;
	this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_1                                        = 0x0402;
	this.MCU_UTIL_MULTIPLIER__MULTIPLICAND_0                                        = 0x0403;
	this.MCU_UTIL_MULTIPLIER__MULTIPLIER                                            = 0x0404;
	this.MCU_UTIL_MULTIPLIER__MULTIPLIER_3                                          = 0x0404;
	this.MCU_UTIL_MULTIPLIER__MULTIPLIER_2                                          = 0x0405;
	this.MCU_UTIL_MULTIPLIER__MULTIPLIER_1                                          = 0x0406;
	this.MCU_UTIL_MULTIPLIER__MULTIPLIER_0                                          = 0x0407;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_HI                                            = 0x0408;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_3                                          = 0x0408;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_2                                          = 0x0409;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_1                                          = 0x040A;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_HI_0                                          = 0x040B;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_LO                                            = 0x040C;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_3                                          = 0x040C;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_2                                          = 0x040D;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_1                                          = 0x040E;
	this.MCU_UTIL_MULTIPLIER__PRODUCT_LO_0                                          = 0x040F;
	this.MCU_UTIL_MULTIPLIER__START                                                 = 0x0410;
	this.MCU_UTIL_MULTIPLIER__STATUS                                                = 0x0411;
	this.MCU_UTIL_DIVIDER__START                                                    = 0x0412;
	this.MCU_UTIL_DIVIDER__STATUS                                                   = 0x0413;
	this.MCU_UTIL_DIVIDER__DIVIDEND                                                 = 0x0414;
	this.MCU_UTIL_DIVIDER__DIVIDEND_3                                               = 0x0414;
	this.MCU_UTIL_DIVIDER__DIVIDEND_2                                               = 0x0415;
	this.MCU_UTIL_DIVIDER__DIVIDEND_1                                               = 0x0416;
	this.MCU_UTIL_DIVIDER__DIVIDEND_0                                               = 0x0417;
	this.MCU_UTIL_DIVIDER__DIVISOR                                                  = 0x0418;
	this.MCU_UTIL_DIVIDER__DIVISOR_3                                                = 0x0418;
	this.MCU_UTIL_DIVIDER__DIVISOR_2                                                = 0x0419;
	this.MCU_UTIL_DIVIDER__DIVISOR_1                                                = 0x041A;
	this.MCU_UTIL_DIVIDER__DIVISOR_0                                                = 0x041B;
	this.MCU_UTIL_DIVIDER__QUOTIENT                                                 = 0x041C;
	this.MCU_UTIL_DIVIDER__QUOTIENT_3                                               = 0x041C;
	this.MCU_UTIL_DIVIDER__QUOTIENT_2                                               = 0x041D;
	this.MCU_UTIL_DIVIDER__QUOTIENT_1                                               = 0x041E;
	this.MCU_UTIL_DIVIDER__QUOTIENT_0                                               = 0x041F;
	this.TIMER0__VALUE_IN                                                           = 0x0420;
	this.TIMER0__VALUE_IN_3                                                         = 0x0420;
	this.TIMER0__VALUE_IN_2                                                         = 0x0421;
	this.TIMER0__VALUE_IN_1                                                         = 0x0422;
	this.TIMER0__VALUE_IN_0                                                         = 0x0423;
	this.TIMER1__VALUE_IN                                                           = 0x0424;
	this.TIMER1__VALUE_IN_3                                                         = 0x0424;
	this.TIMER1__VALUE_IN_2                                                         = 0x0425;
	this.TIMER1__VALUE_IN_1                                                         = 0x0426;
	this.TIMER1__VALUE_IN_0                                                         = 0x0427;
	this.TIMER0__CTRL                                                               = 0x0428;
	this.TIMER1__CTRL                                                               = 0x0429;
	this.MCU_GENERAL_PURPOSE__GP_0                                                  = 0x042C;
	this.MCU_GENERAL_PURPOSE__GP_1                                                  = 0x042D;
	this.MCU_GENERAL_PURPOSE__GP_2                                                  = 0x042E;
	this.MCU_GENERAL_PURPOSE__GP_3                                                  = 0x042F;
	this.MCU_RANGE_CALC__CONFIG                                                     = 0x0430;
	this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE                                     = 0x0432;
	this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_HI                                  = 0x0432;
	this.MCU_RANGE_CALC__OFFSET_CORRECTED_RANGE_LO                                  = 0x0433;
	this.MCU_RANGE_CALC__SPARE_4                                                    = 0x0434;
	this.MCU_RANGE_CALC__SPARE_4_3                                                  = 0x0434;
	this.MCU_RANGE_CALC__SPARE_4_2                                                  = 0x0435;
	this.MCU_RANGE_CALC__SPARE_4_1                                                  = 0x0436;
	this.MCU_RANGE_CALC__SPARE_4_0                                                  = 0x0437;
	this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC                                  = 0x0438;
	this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_HI                               = 0x0438;
	this.MCU_RANGE_CALC__AMBIENT_DURATION_PRE_CALC_LO                               = 0x0439;
	this.MCU_RANGE_CALC__ALGO_VCSEL_PERIOD                                          = 0x043C;
	this.MCU_RANGE_CALC__SPARE_5                                                    = 0x043D;
	this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS                                         = 0x043E;
	this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_HI                                      = 0x043E;
	this.MCU_RANGE_CALC__ALGO_TOTAL_PERIODS_LO                                      = 0x043F;
	this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE                                           = 0x0440;
	this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_3                                         = 0x0440;
	this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_2                                         = 0x0441;
	this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_1                                         = 0x0442;
	this.MCU_RANGE_CALC__ALGO_ACCUM_PHASE_0                                         = 0x0443;
	this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS                                         = 0x0444;
	this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_3                                       = 0x0444;
	this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_2                                       = 0x0445;
	this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_1                                       = 0x0446;
	this.MCU_RANGE_CALC__ALGO_SIGNAL_EVENTS_0                                       = 0x0447;
	this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS                                        = 0x0448;
	this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_3                                      = 0x0448;
	this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_2                                      = 0x0449;
	this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_1                                      = 0x044A;
	this.MCU_RANGE_CALC__ALGO_AMBIENT_EVENTS_0                                      = 0x044B;
	this.MCU_RANGE_CALC__SPARE_6                                                    = 0x044C;
	this.MCU_RANGE_CALC__SPARE_6_HI                                                 = 0x044C;
	this.MCU_RANGE_CALC__SPARE_6_LO                                                 = 0x044D;
	this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD                                   = 0x044E;
	this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_HI                                = 0x044E;
	this.MCU_RANGE_CALC__ALGO_ADJUST_VCSEL_PERIOD_LO                                = 0x044F;
	this.MCU_RANGE_CALC__NUM_SPADS                                                  = 0x0450;
	this.MCU_RANGE_CALC__NUM_SPADS_HI                                               = 0x0450;
	this.MCU_RANGE_CALC__NUM_SPADS_LO                                               = 0x0451;
	this.MCU_RANGE_CALC__PHASE_OUTPUT                                               = 0x0452;
	this.MCU_RANGE_CALC__PHASE_OUTPUT_HI                                            = 0x0452;
	this.MCU_RANGE_CALC__PHASE_OUTPUT_LO                                            = 0x0453;
	this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS                                         = 0x0454;
	this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_3                                       = 0x0454;
	this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_2                                       = 0x0455;
	this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_1                                       = 0x0456;
	this.MCU_RANGE_CALC__RATE_PER_SPAD_MCPS_0                                       = 0x0457;
	this.MCU_RANGE_CALC__SPARE_7                                                    = 0x0458;
	this.MCU_RANGE_CALC__SPARE_8                                                    = 0x0459;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS                                      = 0x045A;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_HI                                   = 0x045A;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_MCPS_LO                                   = 0x045B;
	this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS                                       = 0x045C;
	this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_HI                                    = 0x045C;
	this.MCU_RANGE_CALC__AVG_SIGNAL_RATE_MCPS_LO                                    = 0x045D;
	this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS                                          = 0x045E;
	this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS_HI                                       = 0x045E;
	this.MCU_RANGE_CALC__AMBIENT_RATE_MCPS_LO                                       = 0x045F;
	this.MCU_RANGE_CALC__XTALK                                                      = 0x0460;
	this.MCU_RANGE_CALC__XTALK_HI                                                   = 0x0460;
	this.MCU_RANGE_CALC__XTALK_LO                                                   = 0x0461;
	this.MCU_RANGE_CALC__CALC_STATUS                                                = 0x0462;
	this.MCU_RANGE_CALC__DEBUG                                                      = 0x0463;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS                           = 0x0464;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_HI                        = 0x0464;
	this.MCU_RANGE_CALC__PEAK_SIGNAL_RATE_XTALK_CORR_MCPS_LO                        = 0x0465;
	this.MCU_RANGE_CALC__SPARE_0                                                    = 0x0468;
	this.MCU_RANGE_CALC__SPARE_1                                                    = 0x0469;
	this.MCU_RANGE_CALC__SPARE_2                                                    = 0x046A;
	this.MCU_RANGE_CALC__SPARE_3                                                    = 0x046B;
	this.PATCH__CTRL                                                                = 0x0470;
	this.PATCH__JMP_ENABLES                                                         = 0x0472;
	this.PATCH__JMP_ENABLES_HI                                                      = 0x0472;
	this.PATCH__JMP_ENABLES_LO                                                      = 0x0473;
	this.PATCH__DATA_ENABLES                                                        = 0x0474;
	this.PATCH__DATA_ENABLES_HI                                                     = 0x0474;
	this.PATCH__DATA_ENABLES_LO                                                     = 0x0475;
	this.PATCH__OFFSET_0                                                            = 0x0476;
	this.PATCH__OFFSET_0_HI                                                         = 0x0476;
	this.PATCH__OFFSET_0_LO                                                         = 0x0477;
	this.PATCH__OFFSET_1                                                            = 0x0478;
	this.PATCH__OFFSET_1_HI                                                         = 0x0478;
	this.PATCH__OFFSET_1_LO                                                         = 0x0479;
	this.PATCH__OFFSET_2                                                            = 0x047A;
	this.PATCH__OFFSET_2_HI                                                         = 0x047A;
	this.PATCH__OFFSET_2_LO                                                         = 0x047B;
	this.PATCH__OFFSET_3                                                            = 0x047C;
	this.PATCH__OFFSET_3_HI                                                         = 0x047C;
	this.PATCH__OFFSET_3_LO                                                         = 0x047D;
	this.PATCH__OFFSET_4                                                            = 0x047E;
	this.PATCH__OFFSET_4_HI                                                         = 0x047E;
	this.PATCH__OFFSET_4_LO                                                         = 0x047F;
	this.PATCH__OFFSET_5                                                            = 0x0480;
	this.PATCH__OFFSET_5_HI                                                         = 0x0480;
	this.PATCH__OFFSET_5_LO                                                         = 0x0481;
	this.PATCH__OFFSET_6                                                            = 0x0482;
	this.PATCH__OFFSET_6_HI                                                         = 0x0482;
	this.PATCH__OFFSET_6_LO                                                         = 0x0483;
	this.PATCH__OFFSET_7                                                            = 0x0484;
	this.PATCH__OFFSET_7_HI                                                         = 0x0484;
	this.PATCH__OFFSET_7_LO                                                         = 0x0485;
	this.PATCH__OFFSET_8                                                            = 0x0486;
	this.PATCH__OFFSET_8_HI                                                         = 0x0486;
	this.PATCH__OFFSET_8_LO                                                         = 0x0487;
	this.PATCH__OFFSET_9                                                            = 0x0488;
	this.PATCH__OFFSET_9_HI                                                         = 0x0488;
	this.PATCH__OFFSET_9_LO                                                         = 0x0489;
	this.PATCH__OFFSET_10                                                           = 0x048A;
	this.PATCH__OFFSET_10_HI                                                        = 0x048A;
	this.PATCH__OFFSET_10_LO                                                        = 0x048B;
	this.PATCH__OFFSET_11                                                           = 0x048C;
	this.PATCH__OFFSET_11_HI                                                        = 0x048C;
	this.PATCH__OFFSET_11_LO                                                        = 0x048D;
	this.PATCH__OFFSET_12                                                           = 0x048E;
	this.PATCH__OFFSET_12_HI                                                        = 0x048E;
	this.PATCH__OFFSET_12_LO                                                        = 0x048F;
	this.PATCH__OFFSET_13                                                           = 0x0490;
	this.PATCH__OFFSET_13_HI                                                        = 0x0490;
	this.PATCH__OFFSET_13_LO                                                        = 0x0491;
	this.PATCH__OFFSET_14                                                           = 0x0492;
	this.PATCH__OFFSET_14_HI                                                        = 0x0492;
	this.PATCH__OFFSET_14_LO                                                        = 0x0493;
	this.PATCH__OFFSET_15                                                           = 0x0494;
	this.PATCH__OFFSET_15_HI                                                        = 0x0494;
	this.PATCH__OFFSET_15_LO                                                        = 0x0495;
	this.PATCH__ADDRESS_0                                                           = 0x0496;
	this.PATCH__ADDRESS_0_HI                                                        = 0x0496;
	this.PATCH__ADDRESS_0_LO                                                        = 0x0497;
	this.PATCH__ADDRESS_1                                                           = 0x0498;
	this.PATCH__ADDRESS_1_HI                                                        = 0x0498;
	this.PATCH__ADDRESS_1_LO                                                        = 0x0499;
	this.PATCH__ADDRESS_2                                                           = 0x049A;
	this.PATCH__ADDRESS_2_HI                                                        = 0x049A;
	this.PATCH__ADDRESS_2_LO                                                        = 0x049B;
	this.PATCH__ADDRESS_3                                                           = 0x049C;
	this.PATCH__ADDRESS_3_HI                                                        = 0x049C;
	this.PATCH__ADDRESS_3_LO                                                        = 0x049D;
	this.PATCH__ADDRESS_4                                                           = 0x049E;
	this.PATCH__ADDRESS_4_HI                                                        = 0x049E;
	this.PATCH__ADDRESS_4_LO                                                        = 0x049F;
	this.PATCH__ADDRESS_5                                                           = 0x04A0;
	this.PATCH__ADDRESS_5_HI                                                        = 0x04A0;
	this.PATCH__ADDRESS_5_LO                                                        = 0x04A1;
	this.PATCH__ADDRESS_6                                                           = 0x04A2;
	this.PATCH__ADDRESS_6_HI                                                        = 0x04A2;
	this.PATCH__ADDRESS_6_LO                                                        = 0x04A3;
	this.PATCH__ADDRESS_7                                                           = 0x04A4;
	this.PATCH__ADDRESS_7_HI                                                        = 0x04A4;
	this.PATCH__ADDRESS_7_LO                                                        = 0x04A5;
	this.PATCH__ADDRESS_8                                                           = 0x04A6;
	this.PATCH__ADDRESS_8_HI                                                        = 0x04A6;
	this.PATCH__ADDRESS_8_LO                                                        = 0x04A7;
	this.PATCH__ADDRESS_9                                                           = 0x04A8;
	this.PATCH__ADDRESS_9_HI                                                        = 0x04A8;
	this.PATCH__ADDRESS_9_LO                                                        = 0x04A9;
	this.PATCH__ADDRESS_10                                                          = 0x04AA;
	this.PATCH__ADDRESS_10_HI                                                       = 0x04AA;
	this.PATCH__ADDRESS_10_LO                                                       = 0x04AB;
	this.PATCH__ADDRESS_11                                                          = 0x04AC;
	this.PATCH__ADDRESS_11_HI                                                       = 0x04AC;
	this.PATCH__ADDRESS_11_LO                                                       = 0x04AD;
	this.PATCH__ADDRESS_12                                                          = 0x04AE;
	this.PATCH__ADDRESS_12_HI                                                       = 0x04AE;
	this.PATCH__ADDRESS_12_LO                                                       = 0x04AF;
	this.PATCH__ADDRESS_13                                                          = 0x04B0;
	this.PATCH__ADDRESS_13_HI                                                       = 0x04B0;
	this.PATCH__ADDRESS_13_LO                                                       = 0x04B1;
	this.PATCH__ADDRESS_14                                                          = 0x04B2;
	this.PATCH__ADDRESS_14_HI                                                       = 0x04B2;
	this.PATCH__ADDRESS_14_LO                                                       = 0x04B3;
	this.PATCH__ADDRESS_15                                                          = 0x04B4;
	this.PATCH__ADDRESS_15_HI                                                       = 0x04B4;
	this.PATCH__ADDRESS_15_LO                                                       = 0x04B5;
	this.SPI_ASYNC_MUX__CTRL                                                        = 0x04C0;
	this.CLK__CONFIG                                                                = 0x04C4;
	this.GPIO_LV_MUX__CTRL                                                          = 0x04CC;
	this.GPIO_LV_PAD__CTRL                                                          = 0x04CD;
	this.PAD_I2C_LV__CONFIG                                                         = 0x04D0;
	this.PAD_STARTUP_MODE__VALUE_RO_GO1                                             = 0x04D4;
	this.HOST_IF__STATUS_GO1                                                        = 0x04D5;
	this.MCU_CLK_GATING__CTRL                                                       = 0x04D8;
	this.TEST__BIST_ROM_CTRL                                                        = 0x04E0;
	this.TEST__BIST_ROM_RESULT                                                      = 0x04E1;
	this.TEST__BIST_ROM_MCU_SIG                                                     = 0x04E2;
	this.TEST__BIST_ROM_MCU_SIG_HI                                                  = 0x04E2;
	this.TEST__BIST_ROM_MCU_SIG_LO                                                  = 0x04E3;
	this.TEST__BIST_RAM_CTRL                                                        = 0x04E4;
	this.TEST__BIST_RAM_RESULT                                                      = 0x04E5;
	this.TEST__TMC                                                                  = 0x04E8;
	this.TEST__PLL_BIST_MIN_THRESHOLD                                               = 0x04F0;
	this.TEST__PLL_BIST_MIN_THRESHOLD_HI                                            = 0x04F0;
	this.TEST__PLL_BIST_MIN_THRESHOLD_LO                                            = 0x04F1;
	this.TEST__PLL_BIST_MAX_THRESHOLD                                               = 0x04F2;
	this.TEST__PLL_BIST_MAX_THRESHOLD_HI                                            = 0x04F2;
	this.TEST__PLL_BIST_MAX_THRESHOLD_LO                                            = 0x04F3;
	this.TEST__PLL_BIST_COUNT_OUT                                                   = 0x04F4;
	this.TEST__PLL_BIST_COUNT_OUT_HI                                                = 0x04F4;
	this.TEST__PLL_BIST_COUNT_OUT_LO                                                = 0x04F5;
	this.TEST__PLL_BIST_GONOGO                                                      = 0x04F6;
	this.TEST__PLL_BIST_CTRL                                                        = 0x04F7;
	this.RANGING_CORE__DEVICE_ID                                                    = 0x0680;
	this.RANGING_CORE__REVISION_ID                                                  = 0x0681;
	this.RANGING_CORE__CLK_CTRL1                                                    = 0x0683;
	this.RANGING_CORE__CLK_CTRL2                                                    = 0x0684;
	this.RANGING_CORE__WOI_1                                                        = 0x0685;
	this.RANGING_CORE__WOI_REF_1                                                    = 0x0686;
	this.RANGING_CORE__START_RANGING                                                = 0x0687;
	this.RANGING_CORE__LOW_LIMIT_1                                                  = 0x0690;
	this.RANGING_CORE__HIGH_LIMIT_1                                                 = 0x0691;
	this.RANGING_CORE__LOW_LIMIT_REF_1                                              = 0x0692;
	this.RANGING_CORE__HIGH_LIMIT_REF_1                                             = 0x0693;
	this.RANGING_CORE__QUANTIFIER_1_MSB                                             = 0x0694;
	this.RANGING_CORE__QUANTIFIER_1_LSB                                             = 0x0695;
	this.RANGING_CORE__QUANTIFIER_REF_1_MSB                                         = 0x0696;
	this.RANGING_CORE__QUANTIFIER_REF_1_LSB                                         = 0x0697;
	this.RANGING_CORE__AMBIENT_OFFSET_1_MSB                                         = 0x0698;
	this.RANGING_CORE__AMBIENT_OFFSET_1_LSB                                         = 0x0699;
	this.RANGING_CORE__AMBIENT_OFFSET_REF_1_MSB                                     = 0x069A;
	this.RANGING_CORE__AMBIENT_OFFSET_REF_1_LSB                                     = 0x069B;
	this.RANGING_CORE__FILTER_STRENGTH_1                                            = 0x069C;
	this.RANGING_CORE__FILTER_STRENGTH_REF_1                                        = 0x069D;
	this.RANGING_CORE__SIGNAL_EVENT_LIMIT_1_MSB                                     = 0x069E;
	this.RANGING_CORE__SIGNAL_EVENT_LIMIT_1_LSB                                     = 0x069F;
	this.RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_MSB                                 = 0x06A0;
	this.RANGING_CORE__SIGNAL_EVENT_LIMIT_REF_1_LSB                                 = 0x06A1;
	this.RANGING_CORE__TIMEOUT_OVERALL_PERIODS_MSB                                  = 0x06A4;
	this.RANGING_CORE__TIMEOUT_OVERALL_PERIODS_LSB                                  = 0x06A5;
	this.RANGING_CORE__INVERT_HW                                                    = 0x06A6;
	this.RANGING_CORE__FORCE_HW                                                     = 0x06A7;
	this.RANGING_CORE__STATIC_HW_VALUE                                              = 0x06A8;
	this.RANGING_CORE__FORCE_CONTINUOUS_AMBIENT                                     = 0x06A9;
	this.RANGING_CORE__TEST_PHASE_SELECT_TO_FILTER                                  = 0x06AA;
	this.RANGING_CORE__TEST_PHASE_SELECT_TO_TIMING_GEN                              = 0x06AB;
	this.RANGING_CORE__INITIAL_PHASE_VALUE_1                                        = 0x06AC;
	this.RANGING_CORE__INITIAL_PHASE_VALUE_REF_1                                    = 0x06AD;
	this.RANGING_CORE__FORCE_UP_IN                                                  = 0x06AE;
	this.RANGING_CORE__FORCE_DN_IN                                                  = 0x06AF;
	this.RANGING_CORE__STATIC_UP_VALUE_1                                            = 0x06B0;
	this.RANGING_CORE__STATIC_UP_VALUE_REF_1                                        = 0x06B1;
	this.RANGING_CORE__STATIC_DN_VALUE_1                                            = 0x06B2;
	this.RANGING_CORE__STATIC_DN_VALUE_REF_1                                        = 0x06B3;
	this.RANGING_CORE__MONITOR_UP_DN                                                = 0x06B4;
	this.RANGING_CORE__INVERT_UP_DN                                                 = 0x06B5;
	this.RANGING_CORE__CPUMP_1                                                      = 0x06B6;
	this.RANGING_CORE__CPUMP_2                                                      = 0x06B7;
	this.RANGING_CORE__CPUMP_3                                                      = 0x06B8;
	this.RANGING_CORE__OSC_1                                                        = 0x06B9;
	this.RANGING_CORE__PLL_1                                                        = 0x06BB;
	this.RANGING_CORE__PLL_2                                                        = 0x06BC;
	this.RANGING_CORE__REFERENCE_1                                                  = 0x06BD;
	this.RANGING_CORE__REFERENCE_3                                                  = 0x06BF;
	this.RANGING_CORE__REFERENCE_4                                                  = 0x06C0;
	this.RANGING_CORE__REFERENCE_5                                                  = 0x06C1;
	this.RANGING_CORE__REGAVDD1V2                                                   = 0x06C3;
	this.RANGING_CORE__CALIB_1                                                      = 0x06C4;
	this.RANGING_CORE__CALIB_2                                                      = 0x06C5;
	this.RANGING_CORE__CALIB_3                                                      = 0x06C6;
	this.RANGING_CORE__TST_MUX_SEL1                                                 = 0x06C9;
	this.RANGING_CORE__TST_MUX_SEL2                                                 = 0x06CA;
	this.RANGING_CORE__TST_MUX                                                      = 0x06CB;
	this.RANGING_CORE__GPIO_OUT_TESTMUX                                             = 0x06CC;
	this.RANGING_CORE__CUSTOM_FE                                                    = 0x06CD;
	this.RANGING_CORE__CUSTOM_FE_2                                                  = 0x06CE;
	this.RANGING_CORE__SPAD_READOUT                                                 = 0x06CF;
	this.RANGING_CORE__SPAD_READOUT_1                                               = 0x06D0;
	this.RANGING_CORE__SPAD_READOUT_2                                               = 0x06D1;
	this.RANGING_CORE__SPAD_PS                                                      = 0x06D2;
	this.RANGING_CORE__LASER_SAFETY_2                                               = 0x06D4;
	this.RANGING_CORE__NVM_CTRL__MODE                                               = 0x0780;
	this.RANGING_CORE__NVM_CTRL__PDN                                                = 0x0781;
	this.RANGING_CORE__NVM_CTRL__PROGN                                              = 0x0782;
	this.RANGING_CORE__NVM_CTRL__READN                                              = 0x0783;
	this.RANGING_CORE__NVM_CTRL__PULSE_WIDTH_MSB                                    = 0x0784;
	this.RANGING_CORE__NVM_CTRL__PULSE_WIDTH_LSB                                    = 0x0785;
	this.RANGING_CORE__NVM_CTRL__HV_RISE_MSB                                        = 0x0786;
	this.RANGING_CORE__NVM_CTRL__HV_RISE_LSB                                        = 0x0787;
	this.RANGING_CORE__NVM_CTRL__HV_FALL_MSB                                        = 0x0788;
	this.RANGING_CORE__NVM_CTRL__HV_FALL_LSB                                        = 0x0789;
	this.RANGING_CORE__NVM_CTRL__TST                                                = 0x078A;
	this.RANGING_CORE__NVM_CTRL__TESTREAD                                           = 0x078B;
	this.RANGING_CORE__NVM_CTRL__DATAIN_MMM                                         = 0x078C;
	this.RANGING_CORE__NVM_CTRL__DATAIN_LMM                                         = 0x078D;
	this.RANGING_CORE__NVM_CTRL__DATAIN_LLM                                         = 0x078E;
	this.RANGING_CORE__NVM_CTRL__DATAIN_LLL                                         = 0x078F;
	this.RANGING_CORE__NVM_CTRL__DATAOUT_MMM                                        = 0x0790;
	this.RANGING_CORE__NVM_CTRL__DATAOUT_LMM                                        = 0x0791;
	this.RANGING_CORE__NVM_CTRL__DATAOUT_LLM                                        = 0x0792;
	this.RANGING_CORE__NVM_CTRL__DATAOUT_LLL                                        = 0x0793;
	this.RANGING_CORE__NVM_CTRL__ADDR                                               = 0x0794;
	this.RANGING_CORE__NVM_CTRL__DATAOUT_ECC                                        = 0x0795;
	this.RANGING_CORE__RET_SPAD_EN_0                                                = 0x0796;
	this.RANGING_CORE__RET_SPAD_EN_1                                                = 0x0797;
	this.RANGING_CORE__RET_SPAD_EN_2                                                = 0x0798;
	this.RANGING_CORE__RET_SPAD_EN_3                                                = 0x0799;
	this.RANGING_CORE__RET_SPAD_EN_4                                                = 0x079A;
	this.RANGING_CORE__RET_SPAD_EN_5                                                = 0x079B;
	this.RANGING_CORE__RET_SPAD_EN_6                                                = 0x079C;
	this.RANGING_CORE__RET_SPAD_EN_7                                                = 0x079D;
	this.RANGING_CORE__RET_SPAD_EN_8                                                = 0x079E;
	this.RANGING_CORE__RET_SPAD_EN_9                                                = 0x079F;
	this.RANGING_CORE__RET_SPAD_EN_10                                               = 0x07A0;
	this.RANGING_CORE__RET_SPAD_EN_11                                               = 0x07A1;
	this.RANGING_CORE__RET_SPAD_EN_12                                               = 0x07A2;
	this.RANGING_CORE__RET_SPAD_EN_13                                               = 0x07A3;
	this.RANGING_CORE__RET_SPAD_EN_14                                               = 0x07A4;
	this.RANGING_CORE__RET_SPAD_EN_15                                               = 0x07A5;
	this.RANGING_CORE__RET_SPAD_EN_16                                               = 0x07A6;
	this.RANGING_CORE__RET_SPAD_EN_17                                               = 0x07A7;
	this.RANGING_CORE__SPAD_SHIFT_EN                                                = 0x07BA;
	this.RANGING_CORE__SPAD_DISABLE_CTRL                                            = 0x07BB;
	this.RANGING_CORE__SPAD_EN_SHIFT_OUT_DEBUG                                      = 0x07BC;
	this.RANGING_CORE__SPI_MODE                                                     = 0x07BD;
	this.RANGING_CORE__GPIO_DIR                                                     = 0x07BE;
	this.RANGING_CORE__VCSEL_PERIOD                                                 = 0x0880;
	this.RANGING_CORE__VCSEL_START                                                  = 0x0881;
	this.RANGING_CORE__VCSEL_STOP                                                   = 0x0882;
	this.RANGING_CORE__VCSEL_1                                                      = 0x0885;
	this.RANGING_CORE__VCSEL_STATUS                                                 = 0x088D;
	this.RANGING_CORE__STATUS                                                       = 0x0980;
	this.RANGING_CORE__LASER_CONTINUITY_STATE                                       = 0x0981;
	this.RANGING_CORE__RANGE_1_MMM                                                  = 0x0982;
	this.RANGING_CORE__RANGE_1_LMM                                                  = 0x0983;
	this.RANGING_CORE__RANGE_1_LLM                                                  = 0x0984;
	this.RANGING_CORE__RANGE_1_LLL                                                  = 0x0985;
	this.RANGING_CORE__RANGE_REF_1_MMM                                              = 0x0986;
	this.RANGING_CORE__RANGE_REF_1_LMM                                              = 0x0987;
	this.RANGING_CORE__RANGE_REF_1_LLM                                              = 0x0988;
	this.RANGING_CORE__RANGE_REF_1_LLL                                              = 0x0989;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_MMM                                  = 0x098A;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LMM                                  = 0x098B;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLM                                  = 0x098C;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_1_LLL                                  = 0x098D;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_MMM                                   = 0x098E;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LMM                                   = 0x098F;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLM                                   = 0x0990;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_1_LLL                                   = 0x0991;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_MMM                                    = 0x0992;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LMM                                    = 0x0993;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLM                                    = 0x0994;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_1_LLL                                    = 0x0995;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_MM                                   = 0x0996;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LM                                   = 0x0997;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_1_LL                                   = 0x0998;
	this.RANGING_CORE__AMBIENT_MISMATCH_MM                                          = 0x0999;
	this.RANGING_CORE__AMBIENT_MISMATCH_LM                                          = 0x099A;
	this.RANGING_CORE__AMBIENT_MISMATCH_LL                                          = 0x099B;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_MMM                              = 0x099C;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LMM                              = 0x099D;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLM                              = 0x099E;
	this.RANGING_CORE__AMBIENT_WINDOW_EVENTS_REF_1_LLL                              = 0x099F;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_MMM                               = 0x09A0;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LMM                               = 0x09A1;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLM                               = 0x09A2;
	this.RANGING_CORE__RANGING_TOTAL_EVENTS_REF_1_LLL                               = 0x09A3;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_MMM                                = 0x09A4;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LMM                                = 0x09A5;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLM                                = 0x09A6;
	this.RANGING_CORE__SIGNAL_TOTAL_EVENTS_REF_1_LLL                                = 0x09A7;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_MM                               = 0x09A8;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LM                               = 0x09A9;
	this.RANGING_CORE__TOTAL_PERIODS_ELAPSED_REF_1_LL                               = 0x09AA;
	this.RANGING_CORE__AMBIENT_MISMATCH_REF_MM                                      = 0x09AB;
	this.RANGING_CORE__AMBIENT_MISMATCH_REF_LM                                      = 0x09AC;
	this.RANGING_CORE__AMBIENT_MISMATCH_REF_LL                                      = 0x09AD;
	this.RANGING_CORE__GPIO_CONFIG__A0                                              = 0x0A00;
	this.RANGING_CORE__RESET_CONTROL__A0                                            = 0x0A01;
	this.RANGING_CORE__INTR_MANAGER__A0                                             = 0x0A02;
	this.RANGING_CORE__POWER_FSM_TIME_OSC__A0                                       = 0x0A06;
	this.RANGING_CORE__VCSEL_ATEST__A0                                              = 0x0A07;
	this.RANGING_CORE__VCSEL_PERIOD_CLIPPED__A0                                     = 0x0A08;
	this.RANGING_CORE__VCSEL_STOP_CLIPPED__A0                                       = 0x0A09;
	this.RANGING_CORE__CALIB_2__A0                                                  = 0x0A0A;
	this.RANGING_CORE__STOP_CONDITION__A0                                           = 0x0A0B;
	this.RANGING_CORE__STATUS_RESET__A0                                             = 0x0A0C;
	this.RANGING_CORE__READOUT_CFG__A0                                              = 0x0A0D;
	this.RANGING_CORE__WINDOW_SETTING__A0                                           = 0x0A0E;
	this.RANGING_CORE__VCSEL_DELAY__A0                                              = 0x0A1A;
	this.RANGING_CORE__REFERENCE_2__A0                                              = 0x0A1B;
	this.RANGING_CORE__REGAVDD1V2__A0                                               = 0x0A1D;
	this.RANGING_CORE__TST_MUX__A0                                                  = 0x0A1F;
	this.RANGING_CORE__CUSTOM_FE_2__A0                                              = 0x0A20;
	this.RANGING_CORE__SPAD_READOUT__A0                                             = 0x0A21;
	this.RANGING_CORE__CPUMP_1__A0                                                  = 0x0A22;
	this.RANGING_CORE__SPARE_REGISTER__A0                                           = 0x0A23;
	this.RANGING_CORE__VCSEL_CONT_STAGE5_BYPASS__A0                                 = 0x0A24;
	this.RANGING_CORE__RET_SPAD_EN_18                                               = 0x0A25;
	this.RANGING_CORE__RET_SPAD_EN_19                                               = 0x0A26;
	this.RANGING_CORE__RET_SPAD_EN_20                                               = 0x0A27;
	this.RANGING_CORE__RET_SPAD_EN_21                                               = 0x0A28;
	this.RANGING_CORE__RET_SPAD_EN_22                                               = 0x0A29;
	this.RANGING_CORE__RET_SPAD_EN_23                                               = 0x0A2A;
	this.RANGING_CORE__RET_SPAD_EN_24                                               = 0x0A2B;
	this.RANGING_CORE__RET_SPAD_EN_25                                               = 0x0A2C;
	this.RANGING_CORE__RET_SPAD_EN_26                                               = 0x0A2D;
	this.RANGING_CORE__RET_SPAD_EN_27                                               = 0x0A2E;
	this.RANGING_CORE__RET_SPAD_EN_28                                               = 0x0A2F;
	this.RANGING_CORE__RET_SPAD_EN_29                                               = 0x0A30;
	this.RANGING_CORE__RET_SPAD_EN_30                                               = 0x0A31;
	this.RANGING_CORE__RET_SPAD_EN_31                                               = 0x0A32;
	this.RANGING_CORE__REF_SPAD_EN_0__EWOK                                          = 0x0A33;
	this.RANGING_CORE__REF_SPAD_EN_1__EWOK                                          = 0x0A34;
	this.RANGING_CORE__REF_SPAD_EN_2__EWOK                                          = 0x0A35;
	this.RANGING_CORE__REF_SPAD_EN_3__EWOK                                          = 0x0A36;
	this.RANGING_CORE__REF_SPAD_EN_4__EWOK                                          = 0x0A37;
	this.RANGING_CORE__REF_SPAD_EN_5__EWOK                                          = 0x0A38;
	this.RANGING_CORE__REF_EN_START_SELECT                                          = 0x0A39;
	this.RANGING_CORE__REGDVDD1V2_ATEST__EWOK                                       = 0x0A41;
	this.SOFT_RESET_GO1                                                             = 0x0B00;
	this.PRIVATE__PATCH_BASE_ADDR_RSLV                                              = 0x0E00;
	this.PREV_SHADOW_RESULT__INTERRUPT_STATUS                                       = 0x0ED0;
	this.PREV_SHADOW_RESULT__RANGE_STATUS                                           = 0x0ED1;
	this.PREV_SHADOW_RESULT__REPORT_STATUS                                          = 0x0ED2;
	this.PREV_SHADOW_RESULT__STREAM_COUNT                                           = 0x0ED3;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0                         = 0x0ED4;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI                      = 0x0ED4;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO                      = 0x0ED5;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0                        = 0x0ED6;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI                     = 0x0ED6;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO                     = 0x0ED7;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0                            = 0x0ED8;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI                         = 0x0ED8;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO                         = 0x0ED9;
	this.PREV_SHADOW_RESULT__SIGMA_SD0                                              = 0x0EDA;
	this.PREV_SHADOW_RESULT__SIGMA_SD0_HI                                           = 0x0EDA;
	this.PREV_SHADOW_RESULT__SIGMA_SD0_LO                                           = 0x0EDB;
	this.PREV_SHADOW_RESULT__PHASE_SD0                                              = 0x0EDC;
	this.PREV_SHADOW_RESULT__PHASE_SD0_HI                                           = 0x0EDC;
	this.PREV_SHADOW_RESULT__PHASE_SD0_LO                                           = 0x0EDD;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0                 = 0x0EDE;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI              = 0x0EDE;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO              = 0x0EDF;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0    = 0x0EE0;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI = 0x0EE0;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO = 0x0EE1;
	this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0                    = 0x0EE2;
	this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                 = 0x0EE2;
	this.PREV_SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                 = 0x0EE3;
	this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0                    = 0x0EE4;
	this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                 = 0x0EE4;
	this.PREV_SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                 = 0x0EE5;
	this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0                         = 0x0EE6;
	this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI                      = 0x0EE6;
	this.PREV_SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO                      = 0x0EE7;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1                         = 0x0EE8;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI                      = 0x0EE8;
	this.PREV_SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO                      = 0x0EE9;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1                        = 0x0EEA;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI                     = 0x0EEA;
	this.PREV_SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO                     = 0x0EEB;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1                            = 0x0EEC;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI                         = 0x0EEC;
	this.PREV_SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO                         = 0x0EED;
	this.PREV_SHADOW_RESULT__SIGMA_SD1                                              = 0x0EEE;
	this.PREV_SHADOW_RESULT__SIGMA_SD1_HI                                           = 0x0EEE;
	this.PREV_SHADOW_RESULT__SIGMA_SD1_LO                                           = 0x0EEF;
	this.PREV_SHADOW_RESULT__PHASE_SD1                                              = 0x0EF0;
	this.PREV_SHADOW_RESULT__PHASE_SD1_HI                                           = 0x0EF0;
	this.PREV_SHADOW_RESULT__PHASE_SD1_LO                                           = 0x0EF1;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1                 = 0x0EF2;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI              = 0x0EF2;
	this.PREV_SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO              = 0x0EF3;
	this.PREV_SHADOW_RESULT__SPARE_0_SD1                                            = 0x0EF4;
	this.PREV_SHADOW_RESULT__SPARE_0_SD1_HI                                         = 0x0EF4;
	this.PREV_SHADOW_RESULT__SPARE_0_SD1_LO                                         = 0x0EF5;
	this.PREV_SHADOW_RESULT__SPARE_1_SD1                                            = 0x0EF6;
	this.PREV_SHADOW_RESULT__SPARE_1_SD1_HI                                         = 0x0EF6;
	this.PREV_SHADOW_RESULT__SPARE_1_SD1_LO                                         = 0x0EF7;
	this.PREV_SHADOW_RESULT__SPARE_2_SD1                                            = 0x0EF8;
	this.PREV_SHADOW_RESULT__SPARE_2_SD1_HI                                         = 0x0EF8;
	this.PREV_SHADOW_RESULT__SPARE_2_SD1_LO                                         = 0x0EF9;
	this.PREV_SHADOW_RESULT__SPARE_3_SD1                                            = 0x0EFA;
	this.PREV_SHADOW_RESULT__SPARE_3_SD1_HI                                         = 0x0EFA;
	this.PREV_SHADOW_RESULT__SPARE_3_SD1_LO                                         = 0x0EFB;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0                         = 0x0EFC;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3                       = 0x0EFC;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2                       = 0x0EFD;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1                       = 0x0EFE;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0                       = 0x0EFF;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0                          = 0x0F00;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3                        = 0x0F00;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2                        = 0x0F01;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1                        = 0x0F02;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0                        = 0x0F03;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0                           = 0x0F04;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3                         = 0x0F04;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2                         = 0x0F05;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1                         = 0x0F06;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0                         = 0x0F07;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0                         = 0x0F08;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3                       = 0x0F08;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2                       = 0x0F09;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1                       = 0x0F0A;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0                       = 0x0F0B;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1                         = 0x0F0C;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3                       = 0x0F0C;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2                       = 0x0F0D;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1                       = 0x0F0E;
	this.PREV_SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0                       = 0x0F0F;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1                          = 0x0F10;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3                        = 0x0F10;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2                        = 0x0F11;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1                        = 0x0F12;
	this.PREV_SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0                        = 0x0F13;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1                           = 0x0F14;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3                         = 0x0F14;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2                         = 0x0F15;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1                         = 0x0F16;
	this.PREV_SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0                         = 0x0F17;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1                         = 0x0F18;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3                       = 0x0F18;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2                       = 0x0F19;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1                       = 0x0F1A;
	this.PREV_SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0                       = 0x0F1B;
	this.PREV_SHADOW_RESULT_CORE__SPARE_0                                           = 0x0F1C;
	this.RESULT__DEBUG_STATUS                                                       = 0x0F20;
	this.RESULT__DEBUG_STAGE                                                        = 0x0F21;
	this.GPH__SYSTEM__THRESH_RATE_HIGH                                              = 0x0F24;
	this.GPH__SYSTEM__THRESH_RATE_HIGH_HI                                           = 0x0F24;
	this.GPH__SYSTEM__THRESH_RATE_HIGH_LO                                           = 0x0F25;
	this.GPH__SYSTEM__THRESH_RATE_LOW                                               = 0x0F26;
	this.GPH__SYSTEM__THRESH_RATE_LOW_HI                                            = 0x0F26;
	this.GPH__SYSTEM__THRESH_RATE_LOW_LO                                            = 0x0F27;
	this.GPH__SYSTEM__INTERRUPT_CONFIG_GPIO                                         = 0x0F28;
	this.GPH__DSS_CONFIG__ROI_MODE_CONTROL                                          = 0x0F2F;
	this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT                             = 0x0F30;
	this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_HI                          = 0x0F30;
	this.GPH__DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT_LO                          = 0x0F31;
	this.GPH__DSS_CONFIG__MANUAL_BLOCK_SELECT                                       = 0x0F32;
	this.GPH__DSS_CONFIG__MAX_SPADS_LIMIT                                           = 0x0F33;
	this.GPH__DSS_CONFIG__MIN_SPADS_LIMIT                                           = 0x0F34;
	this.GPH__MM_CONFIG__TIMEOUT_MACROP_A_HI                                        = 0x0F36;
	this.GPH__MM_CONFIG__TIMEOUT_MACROP_A_LO                                        = 0x0F37;
	this.GPH__MM_CONFIG__TIMEOUT_MACROP_B_HI                                        = 0x0F38;
	this.GPH__MM_CONFIG__TIMEOUT_MACROP_B_LO                                        = 0x0F39;
	this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_HI                                     = 0x0F3A;
	this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_A_LO                                     = 0x0F3B;
	this.GPH__RANGE_CONFIG__VCSEL_PERIOD_A                                          = 0x0F3C;
	this.GPH__RANGE_CONFIG__VCSEL_PERIOD_B                                          = 0x0F3D;
	this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_HI                                     = 0x0F3E;
	this.GPH__RANGE_CONFIG__TIMEOUT_MACROP_B_LO                                     = 0x0F3F;
	this.GPH__RANGE_CONFIG__SIGMA_THRESH                                            = 0x0F40;
	this.GPH__RANGE_CONFIG__SIGMA_THRESH_HI                                         = 0x0F40;
	this.GPH__RANGE_CONFIG__SIGMA_THRESH_LO                                         = 0x0F41;
	this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS                           = 0x0F42;
	this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_HI                        = 0x0F42;
	this.GPH__RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS_LO                        = 0x0F43;
	this.GPH__RANGE_CONFIG__VALID_PHASE_LOW                                         = 0x0F44;
	this.GPH__RANGE_CONFIG__VALID_PHASE_HIGH                                        = 0x0F45;
	this.FIRMWARE__INTERNAL_STREAM_COUNT_DIV                                        = 0x0F46;
	this.FIRMWARE__INTERNAL_STREAM_COUNTER_VAL                                      = 0x0F47;
	this.DSS_CALC__ROI_CTRL                                                         = 0x0F54;
	this.DSS_CALC__SPARE_1                                                          = 0x0F55;
	this.DSS_CALC__SPARE_2                                                          = 0x0F56;
	this.DSS_CALC__SPARE_3                                                          = 0x0F57;
	this.DSS_CALC__SPARE_4                                                          = 0x0F58;
	this.DSS_CALC__SPARE_5                                                          = 0x0F59;
	this.DSS_CALC__SPARE_6                                                          = 0x0F5A;
	this.DSS_CALC__SPARE_7                                                          = 0x0F5B;
	this.DSS_CALC__USER_ROI_SPAD_EN_0                                               = 0x0F5C;
	this.DSS_CALC__USER_ROI_SPAD_EN_1                                               = 0x0F5D;
	this.DSS_CALC__USER_ROI_SPAD_EN_2                                               = 0x0F5E;
	this.DSS_CALC__USER_ROI_SPAD_EN_3                                               = 0x0F5F;
	this.DSS_CALC__USER_ROI_SPAD_EN_4                                               = 0x0F60;
	this.DSS_CALC__USER_ROI_SPAD_EN_5                                               = 0x0F61;
	this.DSS_CALC__USER_ROI_SPAD_EN_6                                               = 0x0F62;
	this.DSS_CALC__USER_ROI_SPAD_EN_7                                               = 0x0F63;
	this.DSS_CALC__USER_ROI_SPAD_EN_8                                               = 0x0F64;
	this.DSS_CALC__USER_ROI_SPAD_EN_9                                               = 0x0F65;
	this.DSS_CALC__USER_ROI_SPAD_EN_10                                              = 0x0F66;
	this.DSS_CALC__USER_ROI_SPAD_EN_11                                              = 0x0F67;
	this.DSS_CALC__USER_ROI_SPAD_EN_12                                              = 0x0F68;
	this.DSS_CALC__USER_ROI_SPAD_EN_13                                              = 0x0F69;
	this.DSS_CALC__USER_ROI_SPAD_EN_14                                              = 0x0F6A;
	this.DSS_CALC__USER_ROI_SPAD_EN_15                                              = 0x0F6B;
	this.DSS_CALC__USER_ROI_SPAD_EN_16                                              = 0x0F6C;
	this.DSS_CALC__USER_ROI_SPAD_EN_17                                              = 0x0F6D;
	this.DSS_CALC__USER_ROI_SPAD_EN_18                                              = 0x0F6E;
	this.DSS_CALC__USER_ROI_SPAD_EN_19                                              = 0x0F6F;
	this.DSS_CALC__USER_ROI_SPAD_EN_20                                              = 0x0F70;
	this.DSS_CALC__USER_ROI_SPAD_EN_21                                              = 0x0F71;
	this.DSS_CALC__USER_ROI_SPAD_EN_22                                              = 0x0F72;
	this.DSS_CALC__USER_ROI_SPAD_EN_23                                              = 0x0F73;
	this.DSS_CALC__USER_ROI_SPAD_EN_24                                              = 0x0F74;
	this.DSS_CALC__USER_ROI_SPAD_EN_25                                              = 0x0F75;
	this.DSS_CALC__USER_ROI_SPAD_EN_26                                              = 0x0F76;
	this.DSS_CALC__USER_ROI_SPAD_EN_27                                              = 0x0F77;
	this.DSS_CALC__USER_ROI_SPAD_EN_28                                              = 0x0F78;
	this.DSS_CALC__USER_ROI_SPAD_EN_29                                              = 0x0F79;
	this.DSS_CALC__USER_ROI_SPAD_EN_30                                              = 0x0F7A;
	this.DSS_CALC__USER_ROI_SPAD_EN_31                                              = 0x0F7B;
	this.DSS_CALC__USER_ROI_0                                                       = 0x0F7C;
	this.DSS_CALC__USER_ROI_1                                                       = 0x0F7D;
	this.DSS_CALC__MODE_ROI_0                                                       = 0x0F7E;
	this.DSS_CALC__MODE_ROI_1                                                       = 0x0F7F;
	this.SIGMA_ESTIMATOR_CALC__SPARE_0                                              = 0x0F80;
	this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS                                          = 0x0F82;
	this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_HI                                       = 0x0F82;
	this.VHV_RESULT__PEAK_SIGNAL_RATE_MCPS_LO                                       = 0x0F83;
	this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF                                        = 0x0F84;
	this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_3                                      = 0x0F84;
	this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_2                                      = 0x0F85;
	this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_1                                      = 0x0F86;
	this.VHV_RESULT__SIGNAL_TOTAL_EVENTS_REF_0                                      = 0x0F87;
	this.PHASECAL_RESULT__PHASE_OUTPUT_REF                                          = 0x0F88;
	this.PHASECAL_RESULT__PHASE_OUTPUT_REF_HI                                       = 0x0F88;
	this.PHASECAL_RESULT__PHASE_OUTPUT_REF_LO                                       = 0x0F89;
	this.DSS_RESULT__TOTAL_RATE_PER_SPAD                                            = 0x0F8A;
	this.DSS_RESULT__TOTAL_RATE_PER_SPAD_HI                                         = 0x0F8A;
	this.DSS_RESULT__TOTAL_RATE_PER_SPAD_LO                                         = 0x0F8B;
	this.DSS_RESULT__ENABLED_BLOCKS                                                 = 0x0F8C;
	this.DSS_RESULT__NUM_REQUESTED_SPADS                                            = 0x0F8E;
	this.DSS_RESULT__NUM_REQUESTED_SPADS_HI                                         = 0x0F8E;
	this.DSS_RESULT__NUM_REQUESTED_SPADS_LO                                         = 0x0F8F;
	this.MM_RESULT__INNER_INTERSECTION_RATE                                         = 0x0F92;
	this.MM_RESULT__INNER_INTERSECTION_RATE_HI                                      = 0x0F92;
	this.MM_RESULT__INNER_INTERSECTION_RATE_LO                                      = 0x0F93;
	this.MM_RESULT__OUTER_COMPLEMENT_RATE                                           = 0x0F94;
	this.MM_RESULT__OUTER_COMPLEMENT_RATE_HI                                        = 0x0F94;
	this.MM_RESULT__OUTER_COMPLEMENT_RATE_LO                                        = 0x0F95;
	this.MM_RESULT__TOTAL_OFFSET                                                    = 0x0F96;
	this.MM_RESULT__TOTAL_OFFSET_HI                                                 = 0x0F96;
	this.MM_RESULT__TOTAL_OFFSET_LO                                                 = 0x0F97;
	this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS                                        = 0x0F98;
	this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_3                                      = 0x0F98;
	this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_2                                      = 0x0F99;
	this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_1                                      = 0x0F9A;
	this.XTALK_CALC__XTALK_FOR_ENABLED_SPADS_0                                      = 0x0F9B;
	this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS                                      = 0x0F9C;
	this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_3                                    = 0x0F9C;
	this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_2                                    = 0x0F9D;
	this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_1                                    = 0x0F9E;
	this.XTALK_RESULT__AVG_XTALK_USER_ROI_KCPS_0                                    = 0x0F9F;
	this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS                                  = 0x0FA0;
	this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_3                                = 0x0FA0;
	this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_2                                = 0x0FA1;
	this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_1                                = 0x0FA2;
	this.XTALK_RESULT__AVG_XTALK_MM_INNER_ROI_KCPS_0                                = 0x0FA3;
	this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS                                  = 0x0FA4;
	this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_3                                = 0x0FA4;
	this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_2                                = 0x0FA5;
	this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_1                                = 0x0FA6;
	this.XTALK_RESULT__AVG_XTALK_MM_OUTER_ROI_KCPS_0                                = 0x0FA7;
	this.RANGE_RESULT__ACCUM_PHASE                                                  = 0x0FA8;
	this.RANGE_RESULT__ACCUM_PHASE_3                                                = 0x0FA8;
	this.RANGE_RESULT__ACCUM_PHASE_2                                                = 0x0FA9;
	this.RANGE_RESULT__ACCUM_PHASE_1                                                = 0x0FAA;
	this.RANGE_RESULT__ACCUM_PHASE_0                                                = 0x0FAB;
	this.RANGE_RESULT__OFFSET_CORRECTED_RANGE                                       = 0x0FAC;
	this.RANGE_RESULT__OFFSET_CORRECTED_RANGE_HI                                    = 0x0FAC;
	this.RANGE_RESULT__OFFSET_CORRECTED_RANGE_LO                                    = 0x0FAD;
	this.SHADOW_PHASECAL_RESULT__VCSEL_START                                        = 0x0FAE;
	this.SHADOW_RESULT__INTERRUPT_STATUS                                            = 0x0FB0;
	this.SHADOW_RESULT__RANGE_STATUS                                                = 0x0FB1;
	this.SHADOW_RESULT__REPORT_STATUS                                               = 0x0FB2;
	this.SHADOW_RESULT__STREAM_COUNT                                                = 0x0FB3;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0                              = 0x0FB4;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_HI                           = 0x0FB4;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD0_LO                           = 0x0FB5;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0                             = 0x0FB6;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_HI                          = 0x0FB6;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD0_LO                          = 0x0FB7;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0                                 = 0x0FB8;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_HI                              = 0x0FB8;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD0_LO                              = 0x0FB9;
	this.SHADOW_RESULT__SIGMA_SD0                                                   = 0x0FBA;
	this.SHADOW_RESULT__SIGMA_SD0_HI                                                = 0x0FBA;
	this.SHADOW_RESULT__SIGMA_SD0_LO                                                = 0x0FBB;
	this.SHADOW_RESULT__PHASE_SD0                                                   = 0x0FBC;
	this.SHADOW_RESULT__PHASE_SD0_HI                                                = 0x0FBC;
	this.SHADOW_RESULT__PHASE_SD0_LO                                                = 0x0FBD;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0                      = 0x0FBE;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_HI                   = 0x0FBE;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD0_LO                   = 0x0FBF;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0         = 0x0FC0;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_HI      = 0x0FC0;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_CROSSTALK_CORRECTED_MCPS_SD0_LO      = 0x0FC1;
	this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0                         = 0x0FC2;
	this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                      = 0x0FC2;
	this.SHADOW_RESULT__MM_INNER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                      = 0x0FC3;
	this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0                         = 0x0FC4;
	this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_HI                      = 0x0FC4;
	this.SHADOW_RESULT__MM_OUTER_ACTUAL_EFFECTIVE_SPADS_SD0_LO                      = 0x0FC5;
	this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0                              = 0x0FC6;
	this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_HI                           = 0x0FC6;
	this.SHADOW_RESULT__AVG_SIGNAL_COUNT_RATE_MCPS_SD0_LO                           = 0x0FC7;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1                              = 0x0FC8;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_HI                           = 0x0FC8;
	this.SHADOW_RESULT__DSS_ACTUAL_EFFECTIVE_SPADS_SD1_LO                           = 0x0FC9;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1                             = 0x0FCA;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_HI                          = 0x0FCA;
	this.SHADOW_RESULT__PEAK_SIGNAL_COUNT_RATE_MCPS_SD1_LO                          = 0x0FCB;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1                                 = 0x0FCC;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_HI                              = 0x0FCC;
	this.SHADOW_RESULT__AMBIENT_COUNT_RATE_MCPS_SD1_LO                              = 0x0FCD;
	this.SHADOW_RESULT__SIGMA_SD1                                                   = 0x0FCE;
	this.SHADOW_RESULT__SIGMA_SD1_HI                                                = 0x0FCE;
	this.SHADOW_RESULT__SIGMA_SD1_LO                                                = 0x0FCF;
	this.SHADOW_RESULT__PHASE_SD1                                                   = 0x0FD0;
	this.SHADOW_RESULT__PHASE_SD1_HI                                                = 0x0FD0;
	this.SHADOW_RESULT__PHASE_SD1_LO                                                = 0x0FD1;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1                      = 0x0FD2;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_HI                   = 0x0FD2;
	this.SHADOW_RESULT__FINAL_CROSSTALK_CORRECTED_RANGE_MM_SD1_LO                   = 0x0FD3;
	this.SHADOW_RESULT__SPARE_0_SD1                                                 = 0x0FD4;
	this.SHADOW_RESULT__SPARE_0_SD1_HI                                              = 0x0FD4;
	this.SHADOW_RESULT__SPARE_0_SD1_LO                                              = 0x0FD5;
	this.SHADOW_RESULT__SPARE_1_SD1                                                 = 0x0FD6;
	this.SHADOW_RESULT__SPARE_1_SD1_HI                                              = 0x0FD6;
	this.SHADOW_RESULT__SPARE_1_SD1_LO                                              = 0x0FD7;
	this.SHADOW_RESULT__SPARE_2_SD1                                                 = 0x0FD8;
	this.SHADOW_RESULT__SPARE_2_SD1_HI                                              = 0x0FD8;
	this.SHADOW_RESULT__SPARE_2_SD1_LO                                              = 0x0FD9;
	this.SHADOW_RESULT__SPARE_3_SD1                                                 = 0x0FDA;
	this.SHADOW_RESULT__THRESH_INFO                                                 = 0x0FDB;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0                              = 0x0FDC;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_3                            = 0x0FDC;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_2                            = 0x0FDD;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_1                            = 0x0FDE;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD0_0                            = 0x0FDF;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0                               = 0x0FE0;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_3                             = 0x0FE0;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_2                             = 0x0FE1;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_1                             = 0x0FE2;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD0_0                             = 0x0FE3;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0                                = 0x0FE4;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_3                              = 0x0FE4;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_2                              = 0x0FE5;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_1                              = 0x0FE6;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD0_0                              = 0x0FE7;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0                              = 0x0FE8;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_3                            = 0x0FE8;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_2                            = 0x0FE9;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_1                            = 0x0FEA;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD0_0                            = 0x0FEB;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1                              = 0x0FEC;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_3                            = 0x0FEC;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_2                            = 0x0FED;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_1                            = 0x0FEE;
	this.SHADOW_RESULT_CORE__AMBIENT_WINDOW_EVENTS_SD1_0                            = 0x0FEF;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1                               = 0x0FF0;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_3                             = 0x0FF0;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_2                             = 0x0FF1;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_1                             = 0x0FF2;
	this.SHADOW_RESULT_CORE__RANGING_TOTAL_EVENTS_SD1_0                             = 0x0FF3;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1                                = 0x0FF4;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_3                              = 0x0FF4;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_2                              = 0x0FF5;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_1                              = 0x0FF6;
	this.SHADOW_RESULT_CORE__SIGNAL_TOTAL_EVENTS_SD1_0                              = 0x0FF7;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1                              = 0x0FF8;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_3                            = 0x0FF8;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_2                            = 0x0FF9;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_1                            = 0x0FFA;
	this.SHADOW_RESULT_CORE__TOTAL_PERIODS_ELAPSED_SD1_0                            = 0x0FFB;
	this.SHADOW_RESULT_CORE__SPARE_0                                                = 0x0FFC;
	this.SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_HI                                 = 0x0FFE;
	this.SHADOW_PHASECAL_RESULT__REFERENCE_PHASE_LO                                 = 0x0FFF;
	
	this.TargetRate = 0x0A00;
	this.TimingGuard = 4528;
	this.calibrated = false;
	this.saved_vhv_init = 0;
	this.saved_vhv_timeout = 0;
	this.distance_mode="Unknown";
	this.results = {};
	this.ranging_data = {};
}

VL53L1X.prototype = {
	init: async function(mode,io_2v8){
		this.i2cSlave = await this.i2cPort.open(this.slaveAddress);
		sleep(10);
		if (await this.readReg16Bit(this.IDENTIFICATION__MODEL_ID) != 0xEACC){
			throw ('Failed to find expected ID register values. Check wiring!');
		} else {
			console.log("OK! Is VL53L1X");
		}
		
		// VL53L1_software_reset() begin
		await this.writeReg(this.SOFT_RESET, 0x00);
		await sleep(10);
		await this.writeReg(this.SOFT_RESET, 0x01);
		await sleep(100);
		
		/**
		while(true){
			var fstat = await this.readReg(this.FIRMWARE__SYSTEM_STATUS);
			console.log("fstat:",fstat);
			if ((fstat & 0x01) != 0){
				console.log("FIRMWARE__SYSTEM_STATUS OK");
				break;
			}
			await sleep(10);
		}
		**/
		// VL53L1_poll_for_boot_completion() end

		// VL53L1_software_reset() end

		// VL53L1_DataInit() begin
		if (io_2v8){
			await this.writeReg(PAD_I2C_HV__EXTSUP_CONFIG,
				await this.readReg(PAD_I2C_HV__EXTSUP_CONFIG) | 0x01);
		}
		
		// store oscillator info for later use
		this.fast_osc_frequency = await this.readReg16Bit(this.OSC_MEASURED__FAST_OSC__FREQUENCY);
		this.osc_calibrate_val = await this.readReg16Bit(this.RESULT__OSC_CALIBRATE_VAL);
//		console.log(this.fast_osc_frequency,this.osc_calibrate_val);
		
		// VL53L1_DataInit() end

		// VL53L1_StaticInit() begin

		// Note that the API does not actually apply the configuration settings below
		// when VL53L1_StaticInit() is called: it keeps a copy of the sensor's
		// register contents in memory and doesn't actually write them until a
		// measurement is started. Writing the configuration here means we don't have
		// to keep it all in memory and avoids a lot of redundant writes later.

		// the API sets the preset mode to LOWPOWER_AUTONOMOUS here:
		// VL53L1_set_preset_mode() begin

		// VL53L1_preset_mode_standard_ranging() begin

		// values labeled "tuning parm default" are from vl53l1_tuning_parm_defaults.h
		// (API uses these in VL53L1_init_tuning_parm_storage_struct())

		// static config
		// API resets PAD_I2C_HV__EXTSUP_CONFIG here, but maybe we don't want to do
		// that? (seems like it would disable 2V8 mode)
		await this.writeReg16Bit(this.DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, this.TargetRate); // should already be this value after reset
		await this.writeReg(this.GPIO__TIO_HV_STATUS, 0x02);
		await this.writeReg(this.SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS, 8); // tuning parm default
		await this.writeReg(this.SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS, 16); // tuning parm default
		await this.writeReg(this.ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM, 0x01);
		await this.writeReg(this.ALGO__RANGE_IGNORE_VALID_HEIGHT_MM, 0xFF);
		await this.writeReg(this.ALGO__RANGE_MIN_CLIP, 0); // tuning parm default
		await this.writeReg(this.ALGO__CONSISTENCY_CHECK__TOLERANCE, 2); // tuning parm default

		// general config
		await this.writeReg16Bit(this.SYSTEM__THRESH_RATE_HIGH, 0x0000);
		await this.writeReg16Bit(this.SYSTEM__THRESH_RATE_LOW, 0x0000);
		await this.writeReg(this.DSS_CONFIG__APERTURE_ATTENUATION, 0x38);

		// timing config
		// most of these settings will be determined later by distance and timing
		// budget configuration
		await this.writeReg16Bit(this.RANGE_CONFIG__SIGMA_THRESH, 360); // tuning parm default
		await this.writeReg16Bit(this.RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, 192); // tuning parm default

		// dynamic config

		await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD_0, 0x01);
		await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD_1, 0x01);
		await this.writeReg(this.SD_CONFIG__QUANTIFIER, 2); // tuning parm default

		// VL53L1_preset_mode_standard_ranging() end

		// from VL53L1_preset_mode_timed_ranging_*
		// GPH is 0 after reset, but writing GPH0 and GPH1 above seem to set GPH to 1,
		// and things don't seem to work if we don't set GPH back to 0 (which the API
		// does here).
		await this.writeReg(this.SYSTEM__GROUPED_PARAMETER_HOLD, 0x00);
		await this.writeReg(this.SYSTEM__SEED_CONFIG, 1); // tuning parm default

		// from VL53L1_config_low_power_auto_mode
		await this.writeReg(this.SYSTEM__SEQUENCE_CONFIG, 0x8B); // VHV, PHASECAL, DSS1, RANGE
		await this.writeReg16Bit(this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 200 << 8);
		await this.writeReg(this.DSS_CONFIG__ROI_MODE_CONTROL, 2); // REQUESTED_EFFFECTIVE_SPADS

		// VL53L1_set_preset_mode() end

		// default to long range, 50 ms timing budget
		// note that this is different than what the API defaults to
		if ( !mode ){
			mode = "medium";
		} else {
			mode = mode.toLowerCase();
			if (mode == "long" || mode == "medium" || mode == "short" ){
				
			} else {
				mode = "medium";
			}
		}
		await this.setDistanceMode(mode);
		await this.setMeasurementTimingBudget(50000);

		// VL53L1_StaticInit() end

		// the API triggers this change in VL53L1_init_and_start_range() once a
		// measurement is started; assumes MM1 and MM2 are disabled
		await this.writeReg16Bit(this.ALGO__PART_TO_PART_RANGE_OFFSET_MM,
			await this.readReg16Bit(this.MM_CONFIG__OUTER_OFFSET_MM) * 4);
		
		console.log("VL53L1X Init completed : ");

		return true;
		
	},
	
	// Start continuous ranging measurements, with the given inter-measurement
	// period in milliseconds determining how often the sensor takes a measurement.
	startContinuous: async function(period_ms){
		if ( !period_ms ){
			period_ms = 100;
		}
	  // from VL53L1_set_inter_measurement_period_ms()
	  await this.writeReg32Bit(this.SYSTEM__INTERMEASUREMENT_PERIOD, period_ms * this.osc_calibrate_val);
	  await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
	  await this.writeReg(this.SYSTEM__MODE_START, 0x40); // mode_range__timed
	},
	// Stop continuous measurements
	// based on VL53L1_stop_range()
	stopContinuous: async function(){
	  await this.writeReg(this.SYSTEM__MODE_START, 0x80); // mode_range__abort
	  // VL53L1_low_power_auto_data_stop_range() begin
	  this.calibrated = false;
	  // "restore vhv configs"
	  if (this.saved_vhv_init != 0)
	  {
	    await this.writeReg(this.VHV_CONFIG__INIT, this.saved_vhv_init);
	  }
	  if (this.saved_vhv_timeout != 0)
	  {
	     await this.writeReg(this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, this.saved_vhv_timeout);
	  }

	  // "remove phasecal override"
	  await this.writeReg(this.PHASECAL_CONFIG__OVERRIDE, 0x00);

	  // VL53L1_low_power_auto_data_stop_range() end
	},
	// Returns a range reading in millimeters when continuous mode is active
	// (readRangeSingleMillimeters() also calls this function after starting a
	// single-shot range measurement)
	read: async function(blocking){
		/**
	  if (blocking)
	  {
	    startTimeout();
	    while (!dataReady())
	    {
	      if (checkTimeoutExpired())
	      {
	        did_timeout = true;
	        ranging_data.range_status = None;
	        ranging_data.range_mm = 0;
	        ranging_data.peak_signal_count_rate_MCPS = 0;
	        ranging_data.ambient_count_rate_MCPS = 0;
	        return ranging_data.range_mm;
	      }
	    }
	  }
		**/
	  await this.readResults();
//		console.log("readResults end:",this.results);
	  if (!this.calibrated)
	  {
	    this.setupManualCalibration();
	    this.calibrated = true;
	  }

	  await this.updateDSS();

	  await this.getRangingData();

	  await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
		//console.log("STAT:",this.ranging_data.range_status);

		return (this.ranging_data.range_mm);
	},
	
	
	
	// set distance mode to Short, Medium, or Long
	// based on VL53L1_SetDistanceMode()
	setDistanceMode: async function(mode){
	  // save existing timing budget
	  var budget_us = await this.getMeasurementTimingBudget();

	  switch (mode)
	  {
	    case "short":
	  	console.log("ShortMode");
	      // from VL53L1_preset_mode_standard_ranging_short_range()
	      // timing config
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
	      await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
	      // dynamic config
	      await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x07);
	      await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x05);
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 6); // tuning parm default
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 6); // tuning parm default
	      break;
	    case "medium":
	  	console.log("MediumMode");
	      // from VL53L1_preset_mode_standard_ranging()
	      // timing config
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x0B);
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x09);
	      await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0x78);
	      // dynamic config
	      await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x0B);
	      await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x09);
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 10); // tuning parm default
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 10); // tuning parm default
	      break;
	    case "long": // long
	  	console.log("LongMode");
	      // from VL53L1_preset_mode_standard_ranging_long_range()
	      // timing config
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
	      await this.writeReg(this.RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
	      await this.writeReg(this.RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
	      // dynamic config
	      await this.writeReg(this.SD_CONFIG__WOI_SD0, 0x0F);
	      await this.writeReg(this.SD_CONFIG__WOI_SD1, 0x0D);
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD0, 14); // tuning parm default
	      await this.writeReg(this.SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
	      break;
	    default:
	      // unrecognized mode - do nothing
	      return false;
	  }
	  // reapply timing budget
	  await this.setMeasurementTimingBudget(budget_us);
//		console.log("budget_us:",budget_us);
	  // save mode so it can be returned by getDistanceMode()
	  distance_mode = mode;
	  return true;
	},

	// Set the measurement timing budget in microseconds, which is the time allowed
	// for one measurement. A longer timing budget allows for more accurate
	// measurements.
	// based on VL53L1_SetMeasurementTimingBudgetMicroSeconds()
	setMeasurementTimingBudget: async function( budget_us){
	  // assumes PresetMode is LOWPOWER_AUTONOMOUS

	  if (budget_us <= this.TimingGuard) { return false; }

	  var range_config_timeout_us = budget_us -= this.TimingGuard;
	  if (range_config_timeout_us > 1100000) { return false; } // FDA_MAX_TIMING_BUDGET_US * 2

	  range_config_timeout_us /= 2;

	  // VL53L1_calc_timeout_register_values() begin

	  var macro_period_us;

	  // "Update Macro Period for Range A VCSEL Period"
	  macro_period_us = this.calcMacroPeriod(await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_A));

	  // "Update Phase timeout - uses Timing A"
	  // Timeout of 1000 is tuning parm default (TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT)
	  // via VL53L1_get_preset_mode_timing_cfg().
	  var phasecal_timeout_mclks = this.timeoutMicrosecondsToMclks(1000, macro_period_us);
	  if (phasecal_timeout_mclks > 0xFF) { phasecal_timeout_mclks = 0xFF; }
	  await this.writeReg(this.PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);

	  // "Update MM Timing A timeout"
	  // Timeout of 1 is tuning parm default (LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT)
	  // via VL53L1_get_preset_mode_timing_cfg(). With the API, the register
	  // actually ends up with a slightly different value because it gets assigned,
	  // retrieved, recalculated with a different macro period, and reassigned,
	  // but it probably doesn't matter because it seems like the MM ("mode
	  // mitigation"?) sequence steps are disabled in low power auto mode anyway.
	  await this.writeReg16Bit(this.MM_CONFIG__TIMEOUT_MACROP_A, this.encodeTimeout(
	    this.timeoutMicrosecondsToMclks(1, macro_period_us)));

	  // "Update Range Timing A timeout"
	  await this.writeReg16Bit(this.RANGE_CONFIG__TIMEOUT_MACROP_A, this.encodeTimeout(
	    this.timeoutMicrosecondsToMclks(range_config_timeout_us, macro_period_us)));

	  // "Update Macro Period for Range B VCSEL Period"
	  macro_period_us = this.calcMacroPeriod(await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_B));

	  // "Update MM Timing B timeout"
	  // (See earlier comment about MM Timing A timeout.)
	  await this.writeReg16Bit(this.MM_CONFIG__TIMEOUT_MACROP_B, this.encodeTimeout(
	    this.timeoutMicrosecondsToMclks(1, macro_period_us)));

	  // "Update Range Timing B timeout"
	  await this.writeReg16Bit(this.RANGE_CONFIG__TIMEOUT_MACROP_B, this.encodeTimeout(
	    this.timeoutMicrosecondsToMclks(range_config_timeout_us, macro_period_us)));

	  // VL53L1_calc_timeout_register_values() end

	  return true;
	},
	// Get the measurement timing budget in microseconds
	// based on VL53L1_SetMeasurementTimingBudgetMicroSeconds()
	getMeasurementTimingBudget: async function(){
	  // assumes PresetMode is LOWPOWER_AUTONOMOUS and these sequence steps are
	  // enabled: VHV, PHASECAL, DSS1, RANGE

	  // VL53L1_get_timeouts_us() begin

	  // "Update Macro Period for Range A VCSEL Period"
	  var macro_period_us = this.calcMacroPeriod(await this.readReg(this.RANGE_CONFIG__VCSEL_PERIOD_A));

	  // "Get Range Timing A timeout"

	  var range_config_timeout_us = this.timeoutMclksToMicroseconds(this.decodeTimeout(
	    await this.readReg16Bit(this.RANGE_CONFIG__TIMEOUT_MACROP_A)), macro_period_us);

	  // VL53L1_get_timeouts_us() end

		return  (2 * range_config_timeout_us + this.TimingGuard);
	},
	checkForDataReady: async function(){
		var IntPol = await this.getInterruptPolarity();
		var Temp = await this.readReg( this.GPIO__TIO_HV_STATUS);
//		console.log("IntPol,GPIO__TIO_HV_STATUS : ",IntPol,Temp);
		if ((Temp & 1) == IntPol){
			isDataReady = 1;
		} else {
			isDataReady = 0;
		}
		return(isDataReady);
		
	},
	getInterruptPolarity: async function(){
		var Temp = await this.readReg( this.GPIO_HV_MUX__CTRL);
		Temp = Temp & 0x10;
//		console.log("getInterruptPolarity:",Temp);
//		return( !(Temp>>4));
		var ans;
		if ( (Temp>>4) == 0 ){
			ans = 1;
		} else {
			ans = 0;
		}
		return ( ans );
	},
	clearInterrupt: async function(){
		await this.writeReg(this.SYSTEM__INTERRUPT_CLEAR, 0x01);
	},
	
	// Private Methods /////////////////////////////////////////////////////////////

	// "Setup ranges after the first one in low power auto mode by turning off
	// FW calibration steps and programming static values"
	// based on VL53L1_low_power_auto_setup_manual_calibration()
	setupManualCalibration: async function(){
	  // "save original vhv configs"
	  this.saved_vhv_init = await this.readReg(this.VHV_CONFIG__INIT);
	  this.saved_vhv_timeout = await this.readReg(this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);

	  // "disable VHV init"
	  await this.writeReg(this.VHV_CONFIG__INIT, this.saved_vhv_init & 0x7F);

	  // "set loop bound to tuning param"
	  await this.writeReg(this.VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
	    (this.saved_vhv_timeout & 0x03) + (3 << 2)); // tuning parm default (LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT)

	  // "override phasecal"
	  await this.writeReg(this.PHASECAL_CONFIG__OVERRIDE, 0x01);
	  await this.writeReg(this.CAL_CONFIG__VCSEL_START, await this.readReg(this.PHASECAL_RESULT__VCSEL_START));
	},
	// read measurement results into buffer
	readResults: async function(){
		//console.log("readResults:",(this.RESULT__RANGE_STATUS >>> 8).toString(16), (this.RESULT__RANGE_STATUS & 0xFF).toString(16));
		await this.i2cSlave.writeBytes([(this.RESULT__RANGE_STATUS >>> 8), (this.RESULT__RANGE_STATUS & 0xFF)]);
		var readData = await this.i2cSlave.readBytes(17);
		
		//console.log("readData:",readData);

	//  last_status = Wire.endTransmission();

	  this.results.range_status = readData[0];

	  readData[1]; // report_status: not used

	  this.results.stream_count = readData[2];

	  this.results.dss_actual_effective_spads_sd0  = readData[3] << 8; // high byte
	  this.results.dss_actual_effective_spads_sd0 |=           readData[4];      // low byte

	  readData[5]; // peak_signal_count_rate_mcps_sd0: not used
	  readData[6];

	  this.results.ambient_count_rate_mcps_sd0  = readData[7] << 8; // high byte
	  this.results.ambient_count_rate_mcps_sd0 |=           [8];      // low byte

	  readData[9]; // sigma_sd0: not used
	  readData[10];

	  readData[11]; // phase_sd0: not used
	  readData[12];

	  this.results.final_crosstalk_corrected_range_mm_sd0  = readData[13] << 8; // high byte
	  this.results.final_crosstalk_corrected_range_mm_sd0 |=           readData[14];      // low byte

	  this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0  = readData[15] << 8; // high byte
	  this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 |=           readData[16];      // low byte
	},
	// perform Dynamic SPAD Selection calculation/update
	// based on VL53L1_low_power_auto_update_DSS()
	updateDSS: async function(){
	  var spadCount = this.results.dss_actual_effective_spads_sd0;

	  if (spadCount != 0){
	    // "Calc total rate per spad"
	    var totalRatePerSpad = this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 + this.results.ambient_count_rate_mcps_sd0;

	    // "clip to 16 bits"
	    if (totalRatePerSpad > 0xFFFF) { totalRatePerSpad = 0xFFFF; }

	    // "shift up to take advantage of 32 bits"
	    totalRatePerSpad <<= 16;

	    totalRatePerSpad /= spadCount;

	    if (totalRatePerSpad != 0){
	      // "get the target rate and shift up by 16"
	      var requiredSpads = (this.TargetRate << 16) / totalRatePerSpad;

	      // "clip to 16 bit"
	      if (requiredSpads > 0xFFFF) { requiredSpads = 0xFFFF; }

	      // "override DSS config"
	      await this.writeReg16Bit(this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, requiredSpads);
	      // DSS_CONFIG__ROI_MODE_CONTROL should already be set to REQUESTED_EFFFECTIVE_SPADS

	      return;
	    }
	  }
	  // If we reached this point, it means something above would have resulted in a
	  // divide by zero.
	  // "We want to gracefully set a spad target, not just exit with an error"

	   // "set target to mid point"
	   await this.writeReg16Bit(this.DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
	},
	// get range, status, rates from results buffer
	// based on VL53L1_GetRangingMeasurementData()
	getRangingData: function(){
	  // VL53L1_copy_sys_and_core_results_to_range_results() begin

	  var range = this.results.final_crosstalk_corrected_range_mm_sd0;

	  // "apply correction gain"
	  // gain factor of 2011 is tuning parm default (VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT)
	  // Basically, this appears to scale the result by 2011/2048, or about 98%
	  // (with the 1024 added for proper rounding).
	  this.ranging_data.range_mm = (range * 2011 + 0x0400) / 0x0800;

	  // VL53L1_copy_sys_and_core_results_to_range_results() end

	  // set range_status in ranging_data based on value of RESULT__RANGE_STATUS register
	  // mostly based on ConvertStatusLite()
	  switch(this.results.range_status){
	    case 17: // MULTCLIPFAIL
	    case 2: // VCSELWATCHDOGTESTFAILURE
	    case 1: // VCSELCONTINUITYTESTFAILURE
	    case 3: // NOVHVVALUEFOUND
	      // from SetSimpleData()
	      this.ranging_data.range_status = "HardwareFail";
	      break;
	    case 13: // USERROICLIP
	     // from SetSimpleData()
	      this.ranging_data.range_status = "MinRangeFail";
	      break;
	    case 18: // GPHSTREAMCOUNT0READY
	      this.ranging_data.range_status = "SynchronizationInt";
	      break;
	    case 5: // RANGEPHASECHECK
	      this.ranging_data.range_status =  "OutOfBoundsFail";
	      break;
	    case 4: // MSRCNOTARGET
	      this.ranging_data.range_status = "SignalFail";
	      break;
	    case 6: // SIGMATHRESHOLDCHECK
	      this.ranging_data.range_status = "SignalFail";
	      break;
	    case 7: // PHASECONSISTENCY
	      this.ranging_data.range_status = "WrapTargetFail";
	      break;
	    case 12: // RANGEIGNORETHRESHOLD
	      this.ranging_data.range_status = "XtalkSignalFail";
	      break;
	    case 8: // MINCLIP
	      this.ranging_data.range_status = "RangeValidMinRangeClipped";
	      break;
	    case 9: // RANGECOMPLETE
	      // from VL53L1_copy_sys_and_core_results_to_range_results()
	      if (this.results.stream_count == 0){
	        this.ranging_data.range_status = "RangeValidNoWrapCheckFail";
	      } else {
	        this.ranging_data.range_status = "RangeValid";
	      }
	      break;
	    default:
	      this.ranging_data.range_status = "None";
	  }
	  // from SetSimpleData()
	  this.ranging_data.peak_signal_count_rate_MCPS =
	    this.countRateFixedToFloat(this.results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0);
	  this.ranging_data.ambient_count_rate_MCPS =
	    this.countRateFixedToFloat(this.results.ambient_count_rate_mcps_sd0);
	},
	// Decode sequence step timeout in MCLKs from register value
	// based on VL53L1_decode_timeout()
	decodeTimeout: function(reg_val){
		return (((reg_val & 0xFF) << (reg_val >> 8)) + 1);
	},
	// Encode sequence step timeout register value from timeout in MCLKs
	// based on VL53L1_encode_timeout()
	encodeTimeout: function( timeout_mclks){
	  // encoded format: "(LSByte * 2^MSByte) + 1"
	  var ls_byte = 0;
	  var ms_byte = 0;

	  if (timeout_mclks > 0){
	    ls_byte = timeout_mclks - 1;
	    while ((ls_byte & 0xFFFFFF00) > 0){
	      ls_byte >>= 1;
	      ms_byte++;
	    }
	    return (ms_byte << 8) | (ls_byte & 0xFF);
	  }
	  else { return 0; }
	},
	
	// Convert sequence step timeout from macro periods to microseconds with given
	// macro period in microseconds (12.12 format)
	// based on VL53L1_calc_timeout_us()
	timeoutMclksToMicroseconds: function(timeout_mclks,  macro_period_us){
		return ((timeout_mclks * macro_period_us + 0x800) >> 12);
	},
	// Convert sequence step timeout from microseconds to macro periods with given
	// macro period in microseconds (12.12 format)
	// based on VL53L1_calc_timeout_mclks()
	timeoutMicrosecondsToMclks: function(timeout_us, macro_period_us){
	  return ((timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
	},
	// Calculate macro period in microseconds (12.12 format) with given VCSEL period
	// assumes fast_osc_frequency has been read and stored
	// based on VL53L1_calc_macro_period_us()
	calcMacroPeriod: function(vcsel_period){
	  // from VL53L1_calc_pll_period_us()
	  // fast osc frequency in 4.12 format; PLL period in 0.24 format
	  var pll_period_us = (0x01 << 30) / this.fast_osc_frequency;

	  // from VL53L1_decode_vcsel_period()
	  var vcsel_period_pclks = (vcsel_period + 1) << 1;

	  // VL53L1_MACRO_PERIOD_VCSEL_PERIODS = 2304
	  var macro_period_us = 2304 * pll_period_us;
	  macro_period_us >>= 6;
	  macro_period_us *= vcsel_period_pclks;
	  macro_period_us >>= 6;

		return (macro_period_us);
	},	
	readReg: async function(addr16){
		await this.i2cSlave.writeBytes([(addr16 >>> 8), (addr16 & 0xFF)]);
		var dat = await this.i2cSlave.readBytes(1);
//		console.log("readReg16Bit:",addr16.toString(16),ans.toString(16),":",(addr16 >>> 8).toString(16), (addr16 & 0xFF).toString(16), (dat[0]).toString(16), (dat[1]).toString(16));
		return (dat);
	},
	readReg16Bit: async function(addr16){
		await this.i2cSlave.writeBytes([(addr16 >>> 8), (addr16 & 0xFF)]);
		var dat = await this.i2cSlave.readBytes(2);
		var ans = (dat[0]<<8) + dat[1];
//		console.log("readReg16Bit:",addr16.toString(16),ans.toString(16),":",(addr16 >>> 8).toString(16), (addr16 & 0xFF).toString(16), (dat[0]).toString(16), (dat[1]).toString(16));
		return (ans);
	},
	writeReg: async function(addr16,dat8){
//		console.log("writeReg8Bit:",addr16.toString(16),dat16.toString(16),":",(addr16 >>> 8).toString(16), (addr16 & 0xFF).toString(16), (dat16>>>8).toString(16), (dat16 & 0xFF).toString(16));
		await this.i2cSlave.writeBytes([(addr16 >>> 8), (addr16 & 0xFF),  (dat8 & 0xFF)]);
	},
	writeReg16Bit: async function(addr16,dat16){
//		console.log("writeReg16Bit:",addr16.toString(16),dat16.toString(16),":",(addr16 >>> 8).toString(16), (addr16 & 0xFF).toString(16), (dat16>>>8).toString(16), (dat16 & 0xFF).toString(16));
		await this.i2cSlave.writeBytes([(addr16 >>> 8), (addr16 & 0xFF), (dat16>>>8), (dat16 & 0xFF)]);
	},
	writeReg32Bit: async function(addr16,dat32){
//		console.log("writeReg32Bit:",addr16.toString(16),dat32.toString(16),":",(addr16 >>> 8).toString(16), (addr16 & 0xFF).toString(16), (dat32>>>24).toString(16), (dat32>>>16 & 0xFF).toString(16) , (dat32>>>8 & 0xFF).toString(16), (dat32 & 0xFF).toString(16));
		await this.i2cSlave.writeBytes([(addr16 >>> 8), (addr16 & 0xFF), (dat32>>>24), (dat32>>>16 & 0xFF) , (dat32>>>8 & 0xFF) , (dat32 & 0xFF) ]);
	},
	// Convert count rate from fixed point 9.7 format to float
    countRateFixedToFloat: function(count_rate_fixed){
    	return (count_rate_fixed / (1 << 7));
    }
};